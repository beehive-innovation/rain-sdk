/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RandomTestInterface extends utils.Interface {
  functions: {
    "microLottery(uint256,uint256,uint256)": FunctionFragment;
    "randomId(uint256,uint256)": FunctionFragment;
    "shuffle(uint256,uint256)": FunctionFragment;
    "shuffleIdAtIndex(uint256)": FunctionFragment;
    "shuffled()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "microLottery",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffleIdAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shuffled", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "microLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "randomId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shuffle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shuffleIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shuffled", data: BytesLike): Result;

  events: {};
}

export interface RandomTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RandomTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    microLottery(
      seed_: BigNumberish,
      max_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { item_: BigNumber }>;

    randomId(
      seed_: BigNumberish,
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shuffle(
      seed_: BigNumberish,
      len_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shuffleIdAtIndex(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shuffled(overrides?: CallOverrides): Promise<[string]>;
  };

  microLottery(
    seed_: BigNumberish,
    max_: BigNumberish,
    n_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  randomId(
    seed_: BigNumberish,
    index_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shuffle(
    seed_: BigNumberish,
    len_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shuffleIdAtIndex(
    index_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shuffled(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    microLottery(
      seed_: BigNumberish,
      max_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomId(
      seed_: BigNumberish,
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shuffle(
      seed_: BigNumberish,
      len_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    shuffleIdAtIndex(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shuffled(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    microLottery(
      seed_: BigNumberish,
      max_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomId(
      seed_: BigNumberish,
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shuffle(
      seed_: BigNumberish,
      len_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shuffleIdAtIndex(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shuffled(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    microLottery(
      seed_: BigNumberish,
      max_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomId(
      seed_: BigNumberish,
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shuffle(
      seed_: BigNumberish,
      len_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shuffleIdAtIndex(
      index_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shuffled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
