/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FixedPointMathTest,
  FixedPointMathTestInterface,
} from "../FixedPointMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b_",
        type: "uint256",
      },
    ],
    name: "fixedPointDiv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b_",
        type: "uint256",
      },
    ],
    name: "fixedPointMul",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "aDecimals_",
        type: "uint256",
      },
    ],
    name: "scale18",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "int8",
        name: "scaleBy_",
        type: "int8",
      },
    ],
    name: "scaleBy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "targetDecimals_",
        type: "uint256",
      },
    ],
    name: "scaleN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104e9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063798cc0e911610050578063798cc0e9146100a457806381b8e2a6146100b7578063b34bbe35146100ca57600080fd5b8063279bd00e1461006c5780636baf68f414610091575b600080fd5b61007f61007a366004610279565b6100dd565b60405190815260200160405180910390f35b61007f61009f3660046102af565b6100f2565b61007f6100b23660046102af565b6100fe565b61007f6100c53660046102af565b61010a565b61007f6100d83660046102af565b610116565b60006100e98383610122565b90505b92915050565b60006100e9838361017f565b60006100e9838361019e565b60006100e983836101b3565b60006100e9838361021b565b600081810b6101325750816100ec565b60008260000b131561015a5761014982600a610420565b610153908461042f565b90506100ec565b60ff60008390031661016d81600a61046c565b6101779085610478565b9150506100ec565b600081610194670de0b6b3a76400008561042f565b6100e99190610478565b6000670de0b6b3a7640000610194838561042f565b60008060128314156101c857839150506100ec565b82601211156101e25750601282900361016d81600a61046c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee820161021181600a61046c565b610177908561042f565b600080826012141561023057839150506100ec565b826012111561024a5750601282900361021181600a61046c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee820161016d81600a61046c565b6000806040838503121561028c57600080fd5b8235915060208301358060000b81146102a457600080fd5b809150509250929050565b600080604083850312156102c257600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561035957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561033f5761033f6102d1565b8085161561034c57918102915b93841c9390800290610305565b509250929050565b600082610370575060016100ec565b8161037d575060006100ec565b8160018114610393576002811461039d576103b9565b60019150506100ec565b60ff8411156103ae576103ae6102d1565b50506001821b6100ec565b5060208310610133831016604e8410600b84101617156103dc575081810a6100ec565b6103e68383610300565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610418576104186102d1565b029392505050565b60006100e960ff841683610361565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610467576104676102d1565b500290565b60006100e98383610361565b6000826104ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220ccff7a007af8d1e2ce9a33e604ee934e2fafc0f9f9de5373edc8de66fe93bfe264736f6c634300080a0033";

type FixedPointMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FixedPointMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FixedPointMathTest__factory extends ContractFactory {
  constructor(...args: FixedPointMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixedPointMathTest> {
    return super.deploy(overrides || {}) as Promise<FixedPointMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FixedPointMathTest {
    return super.attach(address) as FixedPointMathTest;
  }
  connect(signer: Signer): FixedPointMathTest__factory {
    return super.connect(signer) as FixedPointMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedPointMathTestInterface {
    return new utils.Interface(_abi) as FixedPointMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedPointMathTest {
    return new Contract(address, _abi, signerOrProvider) as FixedPointMathTest;
  }
}
