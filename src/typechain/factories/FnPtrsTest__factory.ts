/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FnPtrsTest, FnPtrsTestInterface } from "../FnPtrsTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vmStateBuilder_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    inputs: [],
    name: "fnPtrs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
        ],
        internalType: "struct StateConfig",
        name: "stateConfig_",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "storageOpcodesRange",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "pointer",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "length",
            type: "uint256",
          },
        ],
        internalType: "struct StorageOpcodesRange",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516109c73803806109c783398101604081905261002f91610044565b306080526001600160a01b031660a052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160a05161092e6100996000396000610180015260006101bc015261092e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634e75d77e14610046578063e0419ae31461005b578063f2cd6c0814610098575b600080fd5b61005961005436600461036d565b6100a7565b005b6040805180820182526000808252602091820181905282518084018452818152820181815283519182525191810191909152015b60405180910390f35b606060405161008f91906103df565b6100e76040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008082526001602083018190526040805182815280820190915290816020015b6101486040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161010857905050905081816000815181106101715761017161045f565b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166317376ae07f000000000000000000000000000000000000000000000000000000000000000086856040518463ffffffff1660e01b81526004016101fb9392919061060d565b6000604051808303816000875af115801561021a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102609190810190610770565b905061026b816102b6565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550505050565b6000806102e1836040516020016102cd919061083b565b604051602081830303815290604052610341565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff821661033b576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b6060815182604051602001610357929190610861565b6040516020818303038152906040529050919050565b60006020828403121561037f57600080fd5b813567ffffffffffffffff81111561039657600080fd5b8201604081850312156103a857600080fd5b9392505050565b60005b838110156103ca5781810151838201526020016103b2565b838111156103d9576000848401525b50505050565b60208152600082518060208401526103fe8160408501602087016103af565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126104c357600080fd5b830160208101925035905067ffffffffffffffff8111156104e357600080fd5b8060051b36038313156104f557600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561057757600080fd5b8260051b8083602087013760009401602001938452509192915050565b600081518084526020808501945080840160005b8381101561060257815180518852838101518489015260408082015190890152606080820151908901526080808201519089015260a0808201519089015260c0908101519088015260e090960195908201906001016105a8565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff841681526000602060608184015260a0830161063e868761048e565b604060608701528281845260c08701905060c08260051b88010193508260005b83811015610708577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4089870301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18636030181126106bf57600080fd5b8501803567ffffffffffffffff8111156106d857600080fd5b8036038713156106e757600080fd5b6106f488828b85016104fc565b97505050918601919086019060010161065e565b50505050506107198287018761048e565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0858303016080860152610750828483610545565b9250505082810360408401526107668185610594565b9695505050505050565b60006020828403121561078257600080fd5b815167ffffffffffffffff8082111561079a57600080fd5b818401915084601f8301126107ae57600080fd5b8151818111156107c0576107c0610430565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561080657610806610430565b8160405282815287602084870101111561081f57600080fd5b6108308360208301602088016103af565b979650505050505050565b60008152600082516108548160018501602087016103af565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f300000000000000000000000000000000000000000000006005820152600082516108ea81600e8501602087016103af565b91909101600e01939250505056fea2646970667358221220895ec7ba13971596634c9b6079a86fb1ef13d552d5b06aa5fc4c5fa3a354454064736f6c634300080a0033";

type FnPtrsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FnPtrsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FnPtrsTest__factory extends ContractFactory {
  constructor(...args: FnPtrsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    vmStateBuilder_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FnPtrsTest> {
    return super.deploy(
      vmStateBuilder_,
      overrides || {}
    ) as Promise<FnPtrsTest>;
  }
  getDeployTransaction(
    vmStateBuilder_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vmStateBuilder_, overrides || {});
  }
  attach(address: string): FnPtrsTest {
    return super.attach(address) as FnPtrsTest;
  }
  connect(signer: Signer): FnPtrsTest__factory {
    return super.connect(signer) as FnPtrsTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FnPtrsTestInterface {
    return new utils.Interface(_abi) as FnPtrsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FnPtrsTest {
    return new Contract(address, _abi, signerOrProvider) as FnPtrsTest;
  }
}
