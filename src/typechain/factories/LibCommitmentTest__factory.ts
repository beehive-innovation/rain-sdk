/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LibCommitmentTest,
  LibCommitmentTestInterface,
} from "../LibCommitmentTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "Commitment",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "Commitment",
        name: "b_",
        type: "uint256",
      },
    ],
    name: "eq",
    outputs: [
      {
        internalType: "bool",
        name: "eq_",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "Secret",
        name: "secret_",
        type: "uint256",
      },
    ],
    name: "fromSecret",
    outputs: [
      {
        internalType: "Commitment",
        name: "commitment_",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "zero",
    outputs: [
      {
        internalType: "Commitment",
        name: "zero_",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610168806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063320cbc3f1461004657806332148d731461006c578063bc1b392d1461008e575b600080fd5b6100596100543660046100f7565b610095565b6040519081526020015b60405180910390f35b61007e61007a366004610110565b1490565b6040519015158152602001610063565b6000610059565b60006100a0826100a6565b92915050565b6000816040516020016100bb91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012092915050565b60006020828403121561010957600080fd5b5035919050565b6000806040838503121561012357600080fd5b5050803592602090910135915056fea2646970667358221220ff52ac4a8382167015769be3c3b910fb64be85227e41b56a715cc1cba5a4a33d64736f6c634300080a0033";

type LibCommitmentTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibCommitmentTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibCommitmentTest__factory extends ContractFactory {
  constructor(...args: LibCommitmentTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibCommitmentTest> {
    return super.deploy(overrides || {}) as Promise<LibCommitmentTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibCommitmentTest {
    return super.attach(address) as LibCommitmentTest;
  }
  connect(signer: Signer): LibCommitmentTest__factory {
    return super.connect(signer) as LibCommitmentTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibCommitmentTestInterface {
    return new utils.Interface(_abi) as LibCommitmentTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibCommitmentTest {
    return new Contract(address, _abi, signerOrProvider) as LibCommitmentTest;
  }
}
