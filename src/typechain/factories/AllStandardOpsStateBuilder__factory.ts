/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AllStandardOpsStateBuilder,
  AllStandardOpsStateBuilderInterface,
} from "../AllStandardOpsStateBuilder";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vm_",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
        ],
        internalType: "struct StateConfig",
        name: "config_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "entrypoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minFinalStackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stackLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "argumentsLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "storageLength",
            type: "uint256",
          },
        ],
        internalType: "struct Bounds[]",
        name: "boundss_",
        type: "tuple[]",
      },
    ],
    name: "buildState",
    outputs: [
      {
        internalType: "bytes",
        name: "state_",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "stackPops_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "stackPushes_",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
        ],
        internalType: "struct StateConfig",
        name: "stateConfig_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "entrypoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minFinalStackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stackLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "argumentsLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "storageLength",
            type: "uint256",
          },
        ],
        internalType: "struct Bounds",
        name: "bounds_",
        type: "tuple",
      },
    ],
    name: "ensureIntegrity",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stackPops",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "stackPushes",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611d97806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d5236cd14610051578063661b810d1461006f578063aa9628a114610077578063ce19c93514610097575b600080fd5b6100596100ac565b604051610066919061158b565b60405180910390f35b6100596100cc565b61008a6100853660046118e3565b6100e7565b6040516100669190611a01565b6100aa6100a5366004611a52565b6103c2565b005b6040805160008152602081019091526060906100c7906107ca565b905090565b6040805160008152602081019091526060906100c79061099b565b606060006100f485610b6d565b905060006101058260200151610ed2565b905060008060006101146100cc565b905060006101206100ac565b905060005b88518110156101ea57866000015161ffff1689828151811061014957610149611aed565b602002602001015160a001818152505061017e83838c8c858151811061017157610171611aed565b60200260200101516103c2565b6101ae89828151811061019357610193611aed565b60200260200101516080015186610f0690919063ffffffff16565b94506101e08982815181106101c5576101c5611aed565b60200260200101516060015185610f0690919063ffffffff16565b9350600101610125565b506000848a60200151510167ffffffffffffffff81111561020d5761020d6115cf565b604051908082528060200260200182016040528015610236578160200160208202803683370190505b50905060005b8a602001515181101561028c578a60200151818151811061025f5761025f611aed565b602002602001015182828151811061027957610279611aed565b602090810291909101015260010161023c565b5089515160009067ffffffffffffffff8111156102ab576102ab6115cf565b6040519080825280602002602001820160405280156102de57816020015b60608152602001906001900390816102c95790505b50905060005b8b515181101561033a57610315888d60000151838151811061030857610308611aed565b6020026020010151610f1f565b82828151811061032757610327611aed565b60209081029190910101526001016102e4565b506103b26040518060a00160405280600081526020018767ffffffffffffffff811115610369576103696115cf565b604051908082528060200260200182016040528015610392578160200160208202803683370190505b5081526020018381526020018481526020018d60200151518152506110af565b9c9b505050505050505050505050565b80518251518110610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4d494e5f534f555243455300000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000808060008060208602602001885101519050805193505b838510156106dd576002850194508481015180601e1a935080601f1a925050600683101561061e57826104fe5787602001515187608001510182106104ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4f425f434f4e5354414e540000000000000000000000000000000000000000604482015260640161042b565b60408701805160010190526106c0565b600183141561057457866040015182106104ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4f4f425f535441434b0000000000000000000000000000000000000000000000604482015260640161042b565b600283141561058d5760408701805160010190526106c0565b6003831415610603578660a0015182106104ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4f425f53544f52414745000000000000000000000000000000000000000000604482015260640161042b565b6004831415610619576106198a8a8a8a866111ec565b6106c0565b60008a848151811061063257610632611aed565b60200260200101519050600581111561065757806106538463ffffffff8316565b9150505b60408801805182900390819052606089015161067291610f06565b606089015289516000908b908690811061068e5761068e611aed565b6020026020010151905060058111156106b357806106af8563ffffffff8316565b9150505b6040890180519091019052505b604087015160608801516106d391610f06565b606088015261044d565b606087015160ff101561074c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4d41585f535441434b0000000000000000000000000000000000000000000000604482015260640161042b565b8660200151876040015110156107be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f46494e414c5f535441434b5f494e444558000000000000000000000000000000604482015260640161042b565b50505050505050505050565b60606000825190506000604051806105e001604052808360286006010181526020016001815260200160018152602001600181526020016001815260200160008152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200161085061128f90565b81526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152602001600181526020016001815260200160018152509050604051602083020160405280925060005b828110156109935784818151811061096057610960611aed565b602002602001015184602860060183018151811061098057610980611aed565b6020908102919091010152600101610946565b505050919050565b8051606090600061128f90506000604051806105e0016040528084602860060101815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160028152602001600181526020016003815260200160028152602001600281526020016002815260200160038152602001610a256112fe90565b81526020016000815260200160008152602001600081526020016000815260200160018152602001600281526020016002815260200160018152602001600181526020018381526020016003815260200160028152602001838152602001600281526020016001815260200160028152602001838152602001838152602001838152602001838152602001838152602001838152602001838152602001838152602001838152602001838152602001838152602001610ae361137390565b815260200161137981526002602082015260400161137f815260200160028152509050604051602084020160405280935060005b83811015610b6457858181518110610b3157610b31611aed565b6020026020010151856028600601830181518110610b5157610b51611aed565b6020908102919091010152600101610b17565b50505050919050565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff84811682528183529083902083518085019094525461ffff8116845262010000900416908201819052610ecd5760008273ffffffffffffffffffffffffffffffffffffffff163b11610c46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f53495a455f564d0000000000000000000000000000000000000000000000604482015260640161042b565b60008273ffffffffffffffffffffffffffffffffffffffff1663ea7cb3706040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c93573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610cd99190810190611b1c565b905060008373ffffffffffffffffffffffffffffffffffffffff1663e0419ae36040518163ffffffff1660e01b81526004016040805180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190611b93565b905061ffff801681602001511115610dbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f4f425f53544f524147455f4f50434f44455300000000000000000000000000604482015260640161042b565b6002825181610dd057610dd0611be2565b0615610e38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f494e56414c49445f504f494e5445525300000000000000000000000000000000604482015260640161042b565b6040518060400160405280826020015161ffff168152602001610e5a846113ec565b73ffffffffffffffffffffffffffffffffffffffff908116909152858116600090815260208181526040909120835181549285015190931662010000027fffffffffffffffffffff0000000000000000000000000000000000000000000090921661ffff90931692909217179055925050505b919050565b6060610f008260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611477565b92915050565b600081831015610f165781610f18565b825b9392505050565b805182516060919060011615610f91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f44445f5041434b45445f505452530000000000000000000000000000000000604482015260640161042b565b6002810615610ffc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f44445f534f555243455f4c454e475448000000000000000000000000000000604482015260640161042b565b60006002600383020467ffffffffffffffff81111561101d5761101d6115cf565b6040519080825280601f01601f191660200182016040528015611047576020820181803683370190505b50905060056002808701908681019085880101600385015b818310156110a157825180601e1a868111156110805760020285015161ffff165b81601f1a8160081b178351178352505060028301925060038101905061105f565b509398975050505050505050565b606060008260600151905060006018846040015151901b60108560800151901b6008866020015151901b866060015151171717905060008160001b836040516020016110fb9190611c11565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526111379291602001611c47565b604051602081830303815290604052905060005b8560400151518110156111e357818660400151828151811061116f5761116f611aed565b60200260200101515160001b8760400151838151811061119157611191611aed565b60200260200101516040516020016111ab93929190611c6d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052915060010161114b565b50949350505050565b6040820180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600584901c91829003019182905260608401516001909101916112369190610f06565b6060840152608083015161124a9082610f06565b60808401528251600783168085526001600385811c161b919060005b838110156112825761127a8a8a8a8a6103c2565b600101611266565b5050909352505050505050565b60008082116112fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f305f4f504552414e445f4e5a4f4e000000000000000000000000000000000000604482015260640161042b565b5090565b6000808211611369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f305f4f504552414e445f45524331313535000000000000000000000000000000604482015260640161042b565b5060020260010190565b60020190565b60030190565b6000601f821680610f00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4241445f4f504552414e44000000000000000000000000000000000000000000604482015260640161042b565b600080611417836040516020016114039190611ca4565b60405160208183030381529060405261155f565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff8216611471576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b6060833b80611496575050604080516020810190915260008152610f18565b808411156114b4575050604080516020810190915260008152610f18565b838310156114ff576040517f2c4a89fa00000000000000000000000000000000000000000000000000000000815260048101829052602481018590526044810184905260640161042b565b83830384820360008282106115145782611516565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050509392505050565b6060815182604051602001611575929190611cca565b6040516020818303038152906040529050919050565b6020808252825182820181905260009190848201906040850190845b818110156115c3578351835292840192918401916001016115a7565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611621576116216115cf565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561166e5761166e6115cf565b604052919050565b600067ffffffffffffffff821115611690576116906115cf565b5060051b60200190565b600067ffffffffffffffff8211156116b4576116b46115cf565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126116f157600080fd5b8135602061170661170183611676565b611627565b82815260059290921b8401810191818101908684111561172557600080fd5b8286015b848110156117405780358352918301918301611729565b509695505050505050565b6000604080838503121561175e57600080fd5b6117666115fe565b9150823567ffffffffffffffff8082111561178057600080fd5b818501915085601f83011261179457600080fd5b813560206117a461170183611676565b82815260059290921b840181019181810190898411156117c357600080fd5b8286015b84811015611837578035868111156117df5760008081fd5b8701603f81018c136117f15760008081fd5b848101356118016117018261169a565b8181528d8b8385010111156118165760008081fd5b818b84018883013760009181018701919091528452509183019183016117c7565b508752508681013594508285111561184e57600080fd5b61185a888689016116e0565b81870152505050505092915050565b600060c0828403121561187b57600080fd5b60405160c0810181811067ffffffffffffffff8211171561189e5761189e6115cf565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b6000806000606084860312156118f857600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461191c57600080fd5b925060208481013567ffffffffffffffff8082111561193a57600080fd5b6119468883890161174b565b9450604087013591508082111561195c57600080fd5b508501601f8101871361196e57600080fd5b803561197c61170182611676565b81815260c0918202830184019184820191908a84111561199b57600080fd5b938501935b838510156119c1576119b28b86611869565b835293840193918501916119a0565b5080955050505050509250925092565b60005b838110156119ec5781810151838201526020016119d4565b838111156119fb576000848401525b50505050565b6020815260008251806020840152611a208160408501602087016119d1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000806000806101208587031215611a6957600080fd5b843567ffffffffffffffff80821115611a8157600080fd5b611a8d888389016116e0565b95506020870135915080821115611aa357600080fd5b611aaf888389016116e0565b94506040870135915080821115611ac557600080fd5b50611ad28782880161174b565b925050611ae28660608701611869565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611b2e57600080fd5b815167ffffffffffffffff811115611b4557600080fd5b8201601f81018413611b5657600080fd5b8051611b646117018261169a565b818152856020838501011115611b7957600080fd5b611b8a8260208301602086016119d1565b95945050505050565b600060408284031215611ba557600080fd5b6040516040810181811067ffffffffffffffff82111715611bc857611bc86115cf565b604052825181526020928301519281019290925250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b815160009082906020808601845b83811015611c3b57815185529382019390820190600101611c1f565b50929695505050505050565b82815260008251611c5f8160208501602087016119d1565b919091016020019392505050565b60008451611c7f8184602089016119d1565b82018481528351611c978160208085019088016119d1565b0160200195945050505050565b6000815260008251611cbd8160018501602087016119d1565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f30000000000000000000000000000000000000000000000600582015260008251611d5381600e8501602087016119d1565b91909101600e01939250505056fea2646970667358221220a9ada7b31db93d7cfd280905ab5e6ab85e4b96cb1312199c8fa7b9b3dfff4c4964736f6c634300080a0033";

type AllStandardOpsStateBuilderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllStandardOpsStateBuilderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AllStandardOpsStateBuilder__factory extends ContractFactory {
  constructor(...args: AllStandardOpsStateBuilderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AllStandardOpsStateBuilder> {
    return super.deploy(overrides || {}) as Promise<AllStandardOpsStateBuilder>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AllStandardOpsStateBuilder {
    return super.attach(address) as AllStandardOpsStateBuilder;
  }
  connect(signer: Signer): AllStandardOpsStateBuilder__factory {
    return super.connect(signer) as AllStandardOpsStateBuilder__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllStandardOpsStateBuilderInterface {
    return new utils.Interface(_abi) as AllStandardOpsStateBuilderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllStandardOpsStateBuilder {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AllStandardOpsStateBuilder;
  }
}
