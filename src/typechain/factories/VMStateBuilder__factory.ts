/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VMStateBuilder,
  VMStateBuilderInterface,
} from "../VMStateBuilder";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vm_",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
        ],
        internalType: "struct StateConfig",
        name: "config_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "entrypoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minFinalStackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stackLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "argumentsLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "storageLength",
            type: "uint256",
          },
        ],
        internalType: "struct Bounds[]",
        name: "boundss_",
        type: "tuple[]",
      },
    ],
    name: "buildState",
    outputs: [
      {
        internalType: "bytes",
        name: "state_",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "stackPops_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "stackPushes_",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
        ],
        internalType: "struct StateConfig",
        name: "stateConfig_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "entrypoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minFinalStackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stackLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "argumentsLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "storageLength",
            type: "uint256",
          },
        ],
        internalType: "struct Bounds",
        name: "bounds_",
        type: "tuple",
      },
    ],
    name: "ensureIntegrity",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stackPops",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "stackPushes",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611838806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d5236cd14610051578063661b810d14610051578063aa9628a114610069578063ce19c93514610089575b600080fd5b6060604051610060919061102c565b60405180910390f35b61007c610077366004611384565b61009e565b60405161006091906114a2565b61009c6100973660046114f3565b610363565b005b606060006100ab8561076b565b905060006100bc8260200151610ad0565b9050600080606080825b885181101561018b57866000015161ffff168982815181106100ea576100ea61158e565b602002602001015160a001818152505061011f83838c8c85815181106101125761011261158e565b6020026020010151610363565b61014f8982815181106101345761013461158e565b60200260200101516080015186610b0490919063ffffffff16565b94506101818982815181106101665761016661158e565b60200260200101516060015185610b0490919063ffffffff16565b93506001016100c6565b506000848a60200151510167ffffffffffffffff8111156101ae576101ae611070565b6040519080825280602002602001820160405280156101d7578160200160208202803683370190505b50905060005b8a602001515181101561022d578a6020015181815181106102005761020061158e565b602002602001015182828151811061021a5761021a61158e565b60209081029190910101526001016101dd565b5089515160009067ffffffffffffffff81111561024c5761024c611070565b60405190808252806020026020018201604052801561027f57816020015b606081526020019060019003908161026a5790505b50905060005b8b51518110156102db576102b6888d6000015183815181106102a9576102a961158e565b6020026020010151610b1d565b8282815181106102c8576102c861158e565b6020908102919091010152600101610285565b506103536040518060a00160405280600081526020018767ffffffffffffffff81111561030a5761030a611070565b604051908082528060200260200182016040528015610333578160200160208202803683370190505b5081526020018381526020018481526020018d6020015151815250610cad565b9c9b505050505050505050505050565b805182515181106103d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4d494e5f534f555243455300000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000808060008060208602602001885101519050805193505b8385101561067e576002850194508481015180601e1a935080601f1a92505060068310156105bf578261049f57876020015151876080015101821061048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f4f425f434f4e5354414e54000000000000000000000000000000000000000060448201526064016103cc565b6040870180516001019052610661565b6001831415610515578660400151821061048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4f4f425f535441434b000000000000000000000000000000000000000000000060448201526064016103cc565b600283141561052e576040870180516001019052610661565b60038314156105a4578660a00151821061048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f4f425f53544f5241474500000000000000000000000000000000000000000060448201526064016103cc565b60048314156105ba576105ba8a8a8a8a86610dea565b610661565b60008a84815181106105d3576105d361158e565b6020026020010151905060058111156105f857806105f48463ffffffff8316565b9150505b60408801805182900390819052606089015161061391610b04565b606089015289516000908b908690811061062f5761062f61158e565b60200260200101519050600581111561065457806106508563ffffffff8316565b9150505b6040890180519091019052505b6040870151606088015161067491610b04565b60608801526103ee565b606087015160ff10156106ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4d41585f535441434b000000000000000000000000000000000000000000000060448201526064016103cc565b86602001518760400151101561075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f46494e414c5f535441434b5f494e44455800000000000000000000000000000060448201526064016103cc565b50505050505050505050565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff84811682528183529083902083518085019094525461ffff8116845262010000900416908201819052610acb5760008273ffffffffffffffffffffffffffffffffffffffff163b11610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f53495a455f564d000000000000000000000000000000000000000000000060448201526064016103cc565b60008273ffffffffffffffffffffffffffffffffffffffff1663ea7cb3706040518163ffffffff1660e01b8152600401600060405180830381865afa158015610891573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108d791908101906115bd565b905060008373ffffffffffffffffffffffffffffffffffffffff1663e0419ae36040518163ffffffff1660e01b81526004016040805180830381865afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190611634565b905061ffff8016816020015111156109bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f4f425f53544f524147455f4f50434f4445530000000000000000000000000060448201526064016103cc565b60028251816109ce576109ce611683565b0615610a36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f494e56414c49445f504f494e544552530000000000000000000000000000000060448201526064016103cc565b6040518060400160405280826020015161ffff168152602001610a5884610e8d565b73ffffffffffffffffffffffffffffffffffffffff908116909152858116600090815260208181526040909120835181549285015190931662010000027fffffffffffffffffffff0000000000000000000000000000000000000000000090921661ffff90931692909217179055925050505b919050565b6060610afe8260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610f18565b92915050565b600081831015610b145781610b16565b825b9392505050565b805182516060919060011615610b8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f44445f5041434b45445f50545253000000000000000000000000000000000060448201526064016103cc565b6002810615610bfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f44445f534f555243455f4c454e47544800000000000000000000000000000060448201526064016103cc565b60006002600383020467ffffffffffffffff811115610c1b57610c1b611070565b6040519080825280601f01601f191660200182016040528015610c45576020820181803683370190505b50905060056002808701908681019085880101600385015b81831015610c9f57825180601e1a86811115610c7e5760020285015161ffff165b81601f1a8160081b1783511783525050600283019250600381019050610c5d565b509398975050505050505050565b606060008260600151905060006018846040015151901b60108560800151901b6008866020015151901b866060015151171717905060008160001b83604051602001610cf991906116b2565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610d3592916020016116e8565b604051602081830303815290604052905060005b856040015151811015610de1578186604001518281518110610d6d57610d6d61158e565b60200260200101515160001b87604001518381518110610d8f57610d8f61158e565b6020026020010151604051602001610da99392919061170e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529150600101610d49565b50949350505050565b6040820180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600584901c9182900301918290526060840151600190910191610e349190610b04565b60608401526080830151610e489082610b04565b60808401528251600783168085526001600385811c161b919060005b83811015610e8057610e788a8a8a8a610363565b600101610e64565b5050909352505050505050565b600080610eb883604051602001610ea49190611745565b604051602081830303815290604052611000565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff8216610f12576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b6060833b80610f37575050604080516020810190915260008152610b16565b80841115610f55575050604080516020810190915260008152610b16565b83831015610fa0576040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604481018490526064016103cc565b8383038482036000828210610fb55782610fb7565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050509392505050565b606081518260405160200161101692919061176b565b6040516020818303038152906040529050919050565b6020808252825182820181905260009190848201906040850190845b8181101561106457835183529284019291840191600101611048565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156110c2576110c2611070565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561110f5761110f611070565b604052919050565b600067ffffffffffffffff82111561113157611131611070565b5060051b60200190565b600067ffffffffffffffff82111561115557611155611070565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261119257600080fd5b813560206111a76111a283611117565b6110c8565b82815260059290921b840181019181810190868411156111c657600080fd5b8286015b848110156111e157803583529183019183016111ca565b509695505050505050565b600060408083850312156111ff57600080fd5b61120761109f565b9150823567ffffffffffffffff8082111561122157600080fd5b818501915085601f83011261123557600080fd5b813560206112456111a283611117565b82815260059290921b8401810191818101908984111561126457600080fd5b8286015b848110156112d8578035868111156112805760008081fd5b8701603f81018c136112925760008081fd5b848101356112a26111a28261113b565b8181528d8b8385010111156112b75760008081fd5b818b8401888301376000918101870191909152845250918301918301611268565b50875250868101359450828511156112ef57600080fd5b6112fb88868901611181565b81870152505050505092915050565b600060c0828403121561131c57600080fd5b60405160c0810181811067ffffffffffffffff8211171561133f5761133f611070565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b60008060006060848603121561139957600080fd5b833573ffffffffffffffffffffffffffffffffffffffff811681146113bd57600080fd5b925060208481013567ffffffffffffffff808211156113db57600080fd5b6113e7888389016111ec565b945060408701359150808211156113fd57600080fd5b508501601f8101871361140f57600080fd5b803561141d6111a282611117565b81815260c0918202830184019184820191908a84111561143c57600080fd5b938501935b83851015611462576114538b8661130a565b83529384019391850191611441565b5080955050505050509250925092565b60005b8381101561148d578181015183820152602001611475565b8381111561149c576000848401525b50505050565b60208152600082518060208401526114c1816040850160208701611472565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600080600080610120858703121561150a57600080fd5b843567ffffffffffffffff8082111561152257600080fd5b61152e88838901611181565b9550602087013591508082111561154457600080fd5b61155088838901611181565b9450604087013591508082111561156657600080fd5b50611573878288016111ec565b925050611583866060870161130a565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156115cf57600080fd5b815167ffffffffffffffff8111156115e657600080fd5b8201601f810184136115f757600080fd5b80516116056111a28261113b565b81815285602083850101111561161a57600080fd5b61162b826020830160208601611472565b95945050505050565b60006040828403121561164657600080fd5b6040516040810181811067ffffffffffffffff8211171561166957611669611070565b604052825181526020928301519281019290925250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b815160009082906020808601845b838110156116dc578151855293820193908201906001016116c0565b50929695505050505050565b82815260008251611700816020850160208701611472565b919091016020019392505050565b60008451611720818460208901611472565b82018481528351611738816020808501908801611472565b0160200195945050505050565b600081526000825161175e816001850160208701611472565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f300000000000000000000000000000000000000000000006005820152600082516117f481600e850160208701611472565b91909101600e01939250505056fea26469706673582212204f2c1fdca32218e1412ade29a17d26548ce2502d83562d189816298a5935520b64736f6c634300080a0033";

type VMStateBuilderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VMStateBuilderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VMStateBuilder__factory extends ContractFactory {
  constructor(...args: VMStateBuilderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VMStateBuilder> {
    return super.deploy(overrides || {}) as Promise<VMStateBuilder>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VMStateBuilder {
    return super.attach(address) as VMStateBuilder;
  }
  connect(signer: Signer): VMStateBuilder__factory {
    return super.connect(signer) as VMStateBuilder__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VMStateBuilderInterface {
    return new utils.Interface(_abi) as VMStateBuilderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VMStateBuilder {
    return new Contract(address, _abi, signerOrProvider) as VMStateBuilder;
  }
}
