/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CalculatorTest,
  CalculatorTestInterface,
  StateConfigStruct,
} from "../CalculatorTest";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "stackLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "argumentsLength",
            type: "uint256",
          },
        ],
        internalType: "struct StateConfig",
        name: "config_",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "pointer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "stack",
            type: "uint256[]",
          },
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "arguments",
            type: "uint256[]",
          },
        ],
        indexed: false,
        internalType: "struct State",
        name: "state",
        type: "tuple",
      },
    ],
    name: "Snapshot",
    type: "event",
  },
  {
    inputs: [],
    name: "run",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "runState",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "stack",
            type: "uint256[]",
          },
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "arguments",
            type: "uint256[]",
          },
        ],
        internalType: "struct State",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162001a4638038062001a468339810160408190526200003491620003d0565b60046080819052620000499060029062000550565b60a052620000616200005b8262000074565b6200016e565b6001600160a01b031660c0525062000753565b620000a76040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b6040518060a001604052806000815260200183604001516001600160401b03811115620000d857620000d862000290565b60405190808252806020026020018201604052801562000102578160200160208202803683370190505b508152602001836000015181526020018360200151815260200183606001516001600160401b038111156200013b576200013b62000290565b60405190808252806020026020018201604052801562000165578160200160208202803683370190505b50905292915050565b600080620001a8836040516020016200018891906200068e565b604051602081830303815290604052620001ed60201b6200012f1760201c565b90507ff95eed63f55d96a35306669cc3b5f652f8d44552e3e4b17b2f78f13571114abd338285604051620001df93929190620006aa565b60405180910390a192915050565b6000806200022783604051602001620002079190620006d8565b6040516020818303038152906040526200026260201b620001ba1760201c565b90508051602082016000f091506001600160a01b0382166200025c5760405163046a55db60e11b815260040160405180910390fd5b50919050565b60608151826040516020016200027a92919062000700565b6040516020818303038152906040529050919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715620002cb57620002cb62000290565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002fc57620002fc62000290565b604052919050565b60006001600160401b0382111562000320576200032062000290565b5060051b60200190565b60005b83811015620003475781810151838201526020016200032d565b8381111562000357576000848401525b50505050565b600082601f8301126200036f57600080fd5b8151602062000388620003828362000304565b620002d1565b82815260059290921b84018101918181019086841115620003a857600080fd5b8286015b84811015620003c55780518352918301918301620003ac565b509695505050505050565b60006020808385031215620003e457600080fd5b82516001600160401b0380821115620003fc57600080fd5b90840190608082870312156200041157600080fd5b6200041b620002a6565b8251828111156200042b57600080fd5b8301601f810188136200043d57600080fd5b80516200044e620003828262000304565b81815260059190911b8201860190868101908a8311156200046e57600080fd5b8784015b8381101562000504578051878111156200048c5760008081fd5b8501603f81018d136200049f5760008081fd5b89810151604089821115620004b857620004b862000290565b620004cc601f8301601f19168d01620002d1565b8281528f82848601011115620004e25760008081fd5b620004f3838e83018487016200032a565b865250505091880191880162000472565b50845250505082840151828111156200051c57600080fd5b6200052a888286016200035d565b858301525060408301516040820152606083015160608201528094505050505092915050565b600082198211156200057257634e487b7160e01b600052601160045260246000fd5b500190565b600081518084526020808501945080840160005b83811015620005a9578151875295820195908201906001016200058b565b509495945050505050565b80518252600060208083015160a082860152620005d560a086018262000577565b9050604084015185820360408701528181518084528484019150848160051b850101858401935060005b828110156200064957601f1980878403018552855180518085526200062a818b87018c85016200032a565b9689019695890195601f019091169290920187019150600101620005ff565b506060880151955088810360608a015262000665818762000577565b955050505050506080830151848203608086015262000685828262000577565b95945050505050565b602081526000620006a36020830184620005b4565b9392505050565b6001600160a01b038481168252831660208201526060604082018190526000906200068590830184620005b4565b6000815260008251620006f38160018501602087016200032a565b9190910160010192915050565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b600582015281516000906200074581600e8501602087016200032a565b91909101600e019392505050565b60805160a05160c0516112bd62000789600039600060a801526000818161056501526105c50152600061059201526112bd6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806345c6a7a61461003b578063c040622614610059575b600080fd5b61004361006f565b6040516100509190610b67565b60405180910390f35b6100616100ee565b604051908152602001610050565b6100a16040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b60006100cc7f00000000000000000000000000000000000000000000000000000000000000006101e6565b90506100e96040518060200160405280600081525082600061023a565b919050565b6000806100f961006f565b90508060200151600182600001516101119190610c91565b8151811061012157610121610ca8565b602002602001015191505090565b60008061015a836040516020016101469190610cd7565b6040516020818303038152906040526101ba565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff82166101b4576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b60608151826040516020016101d0929190610cfd565b6040516020818303038152906040529050919050565b6102186040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b610221826103cf565b8060200190518101906102349190610fcc565b92915050565b602082810151604084015183830201909101516060840151608085015182516000948594859492939092915b848810156103c2576002880197508784015180601e1a975080601f1a96505060048710156103b65760018714156102c95781608087166102a35750825b8a516020607f89160260200182015160208202602001840152600181018c525050610266565b60028714156102f45789516020870260200182015160208202602001830152600181018b5250610266565b600387141561030d576103088b8b886103fd565b610266565b607f6101fe600188901b161786166080871615610379578a517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01808c5260208c01518051909190811061036357610363610ca8565b6020026020010151600014156103795750610266565b8060000b6000146103b05760008160000b12156103a457801960020160020260ff16890398506103b0565b8060020260ff16890198505b50610266565b6103088b8b8989610563565b5050505050505050505050565b60606102348260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6105f2565b81517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600583901c918290030183526007821690610100600384811c1681901c91908290039060010160008167ffffffffffffffff81111561046157610461610d94565b60405190808252806020026020018201604052801561048a578160200160208202803683370190505b50905060005b828110156104e157876020015181896000015101815181106104b4576104b4610ca8565b60200260200101518282815181106104ce576104ce610ca8565b6020908102919091010152600101610490565b5060005b6101008110156105585760005b83811015610545578482860384838151811061051057610510610ca8565b6020026020010151901b901c8960800151828151811061053257610532610ca8565b60209081029190910101526001016104f2565b5061055189898861023a565b84016104e5565b505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000008210156105be576105b984847f00000000000000000000000000000000000000000000000000000000000000008503846106e0565b6105ec565b6105ec84847f00000000000000000000000000000000000000000000000000000000000000008503846107bc565b50505050565b6060833b806106115750506040805160208101909152600081526106d9565b8084111561062f5750506040805160208101909152600081526106d9565b8383101561067f576040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604481018490526064015b60405180910390fd5b83830384820360008282106106945782610696565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050505b9392505050565b6002821061074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f4445000000000000000000000000000000000000000000006044820152606401610676565b816107815743836020015184600001518151811061076a5761076a610ca8565b6020908102919091010152825160010183526105ec565b60018214156105ec574283602001518460000151815181106107a5576107a5610ca8565b602090810291909101015250508051600101905250565b60088210610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f4445000000000000000000000000000000000000000000006044820152606401610676565b825160208401518051838303927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01918391600091908390811061086c5761086c610ca8565b6020026020010151905060008614156108c4575b828210156108bf5760208701518051600190930192839081106108a5576108a5610ca8565b6020026020010151816108b891906110af565b9050610880565b610ad0565b600186141561090d575b828210156108bf5760208701518051600190930192839081106108f3576108f3610ca8565b6020026020010151816109069190610c91565b90506108ce565b6002861415610956575b828210156108bf57602087015180516001909301928390811061093c5761093c610ca8565b60200260200101518161094f91906110c7565b9050610917565b600386141561099f575b828210156108bf57602087015180516001909301928390811061098557610985610ca8565b6020026020010151816109989190611133565b9050610960565b60048614156109e8575b828210156108bf5760208701518051600190930192839081106109ce576109ce610ca8565b6020026020010151816109e19190611147565b90506109a9565b6005861415610a30575b828210156108bf576020870151805160019093019283908110610a1757610a17610ca8565b602002602001015181610a2a919061127b565b506109f2565b6006861415610a825760005b83831015610a7c576020880151805160019094019384908110610a6157610a61610ca8565b6020026020010151905081811015610a77578091505b610a3c565b50610ad0565b6007861415610ad05760005b83831015610ace576020880151805160019094019384908110610ab357610ab3610ca8565b6020026020010151905081811115610ac9578091505b610a8e565b505b8087602001518581518110610ae757610ae7610ca8565b6020908102919091010152505050600101909252505050565b600081518084526020808501945080840160005b83811015610b3057815187529582019590820190600101610b14565b509495945050505050565b60005b83811015610b56578181015183820152602001610b3e565b838111156105ec5750506000910152565b600060208083528351818401528084015160a06040850152610b8c60c0850182610b00565b905060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808684030160608701528282518085528585019150858160051b860101868501945060005b82811015610c1b578487830301845285518051808452610bfe818b86018c8501610b3b565b9689019694890194601f0186169290920188019150600101610bd9565b5060608a01519650838982030160808a0152610c378188610b00565b965050505060808701519250808685030160a08701525050610c598282610b00565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610ca357610ca3610c62565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815260008251610cf0816001850160208701610b3b565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f30000000000000000000000000000000000000000000000600582015260008251610d8681600e850160208701610b3b565b91909101600e019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610de657610de6610d94565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610e3357610e33610d94565b604052919050565b600067ffffffffffffffff821115610e5557610e55610d94565b5060051b60200190565b600082601f830112610e7057600080fd5b81516020610e85610e8083610e3b565b610dec565b82815260059290921b84018101918181019086841115610ea457600080fd5b8286015b84811015610ebf5780518352918301918301610ea8565b509695505050505050565b6000601f8381840112610edc57600080fd5b82516020610eec610e8083610e3b565b82815260059290921b85018101918181019087841115610f0b57600080fd5b8287015b84811015610fc057805167ffffffffffffffff80821115610f305760008081fd5b818a0191508a603f830112610f455760008081fd5b85820151604082821115610f5b57610f5b610d94565b610f8a887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08c85011601610dec565b92508183528c81838601011115610fa15760008081fd5b610fb082898501838701610b3b565b5050845250918301918301610f0f565b50979650505050505050565b600060208284031215610fde57600080fd5b815167ffffffffffffffff80821115610ff657600080fd5b9083019060a0828603121561100a57600080fd5b611012610dc3565b8251815260208301518281111561102857600080fd5b61103487828601610e5f565b60208301525060408301518281111561104c57600080fd5b61105887828601610eca565b60408301525060608301518281111561107057600080fd5b61107c87828601610e5f565b60608301525060808301518281111561109457600080fd5b6110a087828601610e5f565b60808301525095945050505050565b600082198211156110c2576110c2610c62565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110ff576110ff610c62565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261114257611142611104565b500490565b60008261115657611156611104565b500690565b600181815b808511156111b457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561119a5761119a610c62565b808516156111a757918102915b93841c9390800290611160565b509250929050565b6000826111cb57506001610234565b816111d857506000610234565b81600181146111ee57600281146111f857611214565b6001915050610234565b60ff84111561120957611209610c62565b50506001821b610234565b5060208310610133831016604e8410600b8410161715611237575081810a610234565b611241838361115b565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561127357611273610c62565b029392505050565b60006106d983836111bc56fea2646970667358221220a0d84c685a474716ba01e693055ae838f46a722ae64af3e7e1c7591792b15fff64736f6c634300080a0033";

type CalculatorTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CalculatorTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CalculatorTest__factory extends ContractFactory {
  constructor(...args: CalculatorTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    config_: StateConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CalculatorTest> {
    return super.deploy(config_, overrides || {}) as Promise<CalculatorTest>;
  }
  getDeployTransaction(
    config_: StateConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(config_, overrides || {});
  }
  attach(address: string): CalculatorTest {
    return super.attach(address) as CalculatorTest;
  }
  connect(signer: Signer): CalculatorTest__factory {
    return super.connect(signer) as CalculatorTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalculatorTestInterface {
    return new utils.Interface(_abi) as CalculatorTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CalculatorTest {
    return new Contract(address, _abi, signerOrProvider) as CalculatorTest;
  }
}
