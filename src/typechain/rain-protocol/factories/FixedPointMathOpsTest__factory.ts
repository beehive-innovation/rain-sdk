/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FixedPointMathOpsTest,
  FixedPointMathOpsTestInterface,
  StateConfigStruct,
} from "../FixedPointMathOpsTest";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "stackLength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "argumentsLength",
            type: "uint256",
          },
        ],
        internalType: "struct StateConfig",
        name: "config_",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "pointer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "stack",
            type: "uint256[]",
          },
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "arguments",
            type: "uint256[]",
          },
        ],
        indexed: false,
        internalType: "struct State",
        name: "state",
        type: "tuple",
      },
    ],
    name: "Snapshot",
    type: "event",
  },
  {
    inputs: [],
    name: "run",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "runState",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stackIndex",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "stack",
            type: "uint256[]",
          },
          {
            internalType: "bytes[]",
            name: "sources",
            type: "bytes[]",
          },
          {
            internalType: "uint256[]",
            name: "constants",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "arguments",
            type: "uint256[]",
          },
        ],
        internalType: "struct State",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620019c7380380620019c78339810160408190526200003491620003bd565b60046080526200004e620000488262000061565b6200015b565b6001600160a01b031660a0525062000719565b620000946040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b6040518060a001604052806000815260200183604001516001600160401b03811115620000c557620000c56200027d565b604051908082528060200260200182016040528015620000ef578160200160208202803683370190505b508152602001836000015181526020018360200151815260200183606001516001600160401b038111156200012857620001286200027d565b60405190808252806020026020018201604052801562000152578160200160208202803683370190505b50905292915050565b600080620001958360405160200162000175919062000654565b604051602081830303815290604052620001da60201b6200012f1760201c565b90507ff95eed63f55d96a35306669cc3b5f652f8d44552e3e4b17b2f78f13571114abd338285604051620001cc9392919062000670565b60405180910390a192915050565b6000806200021483604051602001620001f491906200069e565b6040516020818303038152906040526200024f60201b620001ba1760201c565b90508051602082016000f091506001600160a01b038216620002495760405163046a55db60e11b815260040160405180910390fd5b50919050565b606081518260405160200162000267929190620006c6565b6040516020818303038152906040529050919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715620002b857620002b86200027d565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002e957620002e96200027d565b604052919050565b60006001600160401b038211156200030d576200030d6200027d565b5060051b60200190565b60005b83811015620003345781810151838201526020016200031a565b8381111562000344576000848401525b50505050565b600082601f8301126200035c57600080fd5b81516020620003756200036f83620002f1565b620002be565b82815260059290921b840181019181810190868411156200039557600080fd5b8286015b84811015620003b2578051835291830191830162000399565b509695505050505050565b60006020808385031215620003d157600080fd5b82516001600160401b0380821115620003e957600080fd5b9084019060808287031215620003fe57600080fd5b6200040862000293565b8251828111156200041857600080fd5b8301601f810188136200042a57600080fd5b80516200043b6200036f82620002f1565b81815260059190911b8201860190868101908a8311156200045b57600080fd5b8784015b83811015620004f157805187811115620004795760008081fd5b8501603f81018d136200048c5760008081fd5b89810151604089821115620004a557620004a56200027d565b620004b9601f8301601f19168d01620002be565b8281528f82848601011115620004cf5760008081fd5b620004e0838e830184870162000317565b86525050509188019188016200045f565b50845250505082840151828111156200050957600080fd5b62000517888286016200034a565b858301525060408301516040820152606083015160608201528094505050505092915050565b600081518084526020808501945080840160005b838110156200056f5781518752958201959082019060010162000551565b509495945050505050565b80518252600060208083015160a0828601526200059b60a08601826200053d565b9050604084015185820360408701528181518084528484019150848160051b850101858401935060005b828110156200060f57601f198087840301855285518051808552620005f0818b87018c850162000317565b9689019695890195601f019091169290920187019150600101620005c5565b506060880151955088810360608a01526200062b81876200053d565b95505050505050608083015184820360808601526200064b82826200053d565b95945050505050565b6020815260006200066960208301846200057a565b9392505050565b6001600160a01b038481168252831660208201526060604082018190526000906200064b908301846200057a565b6000815260008251620006b981600185016020870162000317565b9190910160010192915050565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b600582015281516000906200070b81600e85016020870162000317565b91909101600e019392505050565b60805160a0516112896200073e600039600060a80152600061056a01526112896000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806345c6a7a61461003b578063c040622614610059575b600080fd5b61004361006f565b6040516100509190610b04565b60405180910390f35b6100616100ee565b604051908152602001610050565b6100a16040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b60006100cc7f00000000000000000000000000000000000000000000000000000000000000006101e6565b90506100e96040518060200160405280600081525082600061023a565b919050565b6000806100f961006f565b90508060200151600182600001516101119190610c2e565b8151811061012157610121610c45565b602002602001015191505090565b60008061015a836040516020016101469190610c74565b6040516020818303038152906040526101ba565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff82166101b4576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b60608151826040516020016101d0929190610c9a565b6040516020818303038152906040529050919050565b6102186040518060a0016040528060008152602001606081526020016060815260200160608152602001606081525090565b610221826103cf565b8060200190518101906102349190610f69565b92915050565b602082810151604084015183830201909101516060840151608085015182516000948594859492939092915b848810156103c2576002880197508784015180601e1a975080601f1a96505060048710156103b65760018714156102c95781608087166102a35750825b8a516020607f89160260200182015160208202602001840152600181018c525050610266565b60028714156102f45789516020870260200182015160208202602001830152600181018b5250610266565b600387141561030d576103088b8b886103fd565b610266565b607f6101fe600188901b161786166080871615610379578a517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01808c5260208c01518051909190811061036357610363610c45565b6020026020010151600014156103795750610266565b8060000b6000146103b05760008160000b12156103a457801960020160020260ff16890398506103b0565b8060020260ff16890198505b50610266565b6103088b8b8989610563565b5050505050505050505050565b60606102348260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610597565b81517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600583901c918290030183526007821690610100600384811c1681901c91908290039060010160008167ffffffffffffffff81111561046157610461610d31565b60405190808252806020026020018201604052801561048a578160200160208202803683370190505b50905060005b828110156104e157876020015181896000015101815181106104b4576104b4610c45565b60200260200101518282815181106104ce576104ce610c45565b6020908102919091010152600101610490565b5060005b6101008110156105585760005b83811015610545578482860384838151811061051057610510610c45565b6020026020010151901b901c8960800151828151811061053257610532610c45565b60209081029190910101526001016104f2565b5061055189898861023a565b84016104e5565b505050505050505050565b61059184847f0000000000000000000000000000000000000000000000000000000000000000850384610685565b50505050565b6060833b806105b657505060408051602081019091526000815261067e565b808411156105d457505060408051602081019091526000815261067e565b83831015610624576040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604481018490526064015b60405180910390fd5b8383038482036000828210610639578261063b565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050505b9392505050565b600782106106ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4d41585f4f50434f444500000000000000000000000000000000000000000000604482015260640161061b565b600282101561083b5782517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe018261079a578360200151816001018151811061073a5761073a610c45565b6020026020010151610772838660200151848151811061075c5761075c610c45565b60200260200101516109cc90919063ffffffff16565b028460200151828151811061078957610789610c45565b60200260200101818152505061080f565b600183141561080f57836020015181600101815181106107bc576107bc610c45565b60200260200101516107de838660200151848151811061075c5761075c610c45565b816107eb576107eb61104c565b048460200151828151811061080257610802610c45565b6020026020010181815250505b5082517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018352610591565b600582101561094d5782517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160028314156108b25761088b828560200151838151811061075c5761075c610c45565b846020015182815181106108a1576108a1610c45565b602002602001018181525050610947565b60038314156108eb5761088b82856020015183815181106108d5576108d5610c45565b6020026020010151610a2e90919063ffffffff16565b600483141561094757610924828560200151838151811061090e5761090e610c45565b6020026020010151610a5f90919063ffffffff16565b8460200151828151811061093a5761093a610c45565b6020026020010181815250505b50610591565b600582141561099057602083015183518151670de0b6b3a7640000929190811061097957610979610c45565b602090810291909101015282516001018352610591565b600682141561059157601283602001518460000151815181106109b5576109b5610c45565b602090810291909101015250508051600101905250565b600081601214156109de575081610234565b8160121115610a0e576109f2826012610c2e565b6109fd90600a61119b565b610a0790846111a7565b9050610234565b610a19601283610c2e565b610a2490600a61119b565b610a0790846111e4565b60006012821415610a40575081610234565b8160121115610a5457610a19826012610c2e565b6109f2601283610c2e565b600081810b610a6f575081610234565b60008260000b1315610a86576109fd82600a61121f565b610a928219600161122e565b610a2490600a61121f565b600081518084526020808501945080840160005b83811015610acd57815187529582019590820190600101610ab1565b509495945050505050565b60005b83811015610af3578181015183820152602001610adb565b838111156105915750506000910152565b600060208083528351818401528084015160a06040850152610b2960c0850182610a9d565b905060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808684030160608701528282518085528585019150858160051b860101868501945060005b82811015610bb8578487830301845285518051808452610b9b818b86018c8501610ad8565b9689019694890194601f0186169290920188019150600101610b76565b5060608a01519650838982030160808a0152610bd48188610a9d565b965050505060808701519250808685030160a08701525050610bf68282610a9d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610c4057610c40610bff565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815260008251610c8d816001850160208701610ad8565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f30000000000000000000000000000000000000000000000600582015260008251610d2381600e850160208701610ad8565b91909101600e019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610d8357610d83610d31565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610dd057610dd0610d31565b604052919050565b600067ffffffffffffffff821115610df257610df2610d31565b5060051b60200190565b600082601f830112610e0d57600080fd5b81516020610e22610e1d83610dd8565b610d89565b82815260059290921b84018101918181019086841115610e4157600080fd5b8286015b84811015610e5c5780518352918301918301610e45565b509695505050505050565b6000601f8381840112610e7957600080fd5b82516020610e89610e1d83610dd8565b82815260059290921b85018101918181019087841115610ea857600080fd5b8287015b84811015610f5d57805167ffffffffffffffff80821115610ecd5760008081fd5b818a0191508a603f830112610ee25760008081fd5b85820151604082821115610ef857610ef8610d31565b610f27887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08c85011601610d89565b92508183528c81838601011115610f3e5760008081fd5b610f4d82898501838701610ad8565b5050845250918301918301610eac565b50979650505050505050565b600060208284031215610f7b57600080fd5b815167ffffffffffffffff80821115610f9357600080fd5b9083019060a08286031215610fa757600080fd5b610faf610d60565b82518152602083015182811115610fc557600080fd5b610fd187828601610dfc565b602083015250604083015182811115610fe957600080fd5b610ff587828601610e67565b60408301525060608301518281111561100d57600080fd5b61101987828601610dfc565b60608301525060808301518281111561103157600080fd5b61103d87828601610dfc565b60808301525095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600181815b808511156110d457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156110ba576110ba610bff565b808516156110c757918102915b93841c9390800290611080565b509250929050565b6000826110eb57506001610234565b816110f857506000610234565b816001811461110e576002811461111857611134565b6001915050610234565b60ff84111561112957611129610bff565b50506001821b610234565b5060208310610133831016604e8410600b8410161715611157575081810a610234565b611161838361107b565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561119357611193610bff565b029392505050565b600061067e83836110dc565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111df576111df610bff565b500290565b60008261121a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600061067e60ff8416836110dc565b600060ff821660ff84168060ff0382111561124b5761124b610bff565b01939250505056fea2646970667358221220c79dff14e4e6d97593402007f181b0406d057184591db9b0658f591121a6c58a64736f6c634300080a0033";

type FixedPointMathOpsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FixedPointMathOpsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FixedPointMathOpsTest__factory extends ContractFactory {
  constructor(...args: FixedPointMathOpsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    config_: StateConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixedPointMathOpsTest> {
    return super.deploy(
      config_,
      overrides || {}
    ) as Promise<FixedPointMathOpsTest>;
  }
  getDeployTransaction(
    config_: StateConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(config_, overrides || {});
  }
  attach(address: string): FixedPointMathOpsTest {
    return super.attach(address) as FixedPointMathOpsTest;
  }
  connect(signer: Signer): FixedPointMathOpsTest__factory {
    return super.connect(signer) as FixedPointMathOpsTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedPointMathOpsTestInterface {
    return new utils.Interface(_abi) as FixedPointMathOpsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedPointMathOpsTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FixedPointMathOpsTest;
  }
}
