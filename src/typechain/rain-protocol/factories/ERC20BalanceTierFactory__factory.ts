/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20BalanceTierFactory,
  ERC20BalanceTierFactoryInterface,
} from "../ERC20BalanceTierFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Implementation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "child",
        type: "address",
      },
    ],
    name: "NewChild",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data_",
        type: "bytes",
      },
    ],
    name: "createChild",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "erc20",
            type: "address",
          },
          {
            internalType: "uint256[8]",
            name: "tierValues",
            type: "uint256[8]",
          },
        ],
        internalType: "struct ERC20BalanceTierConfig",
        name: "config_",
        type: "tuple",
      },
    ],
    name: "createChildTyped",
    outputs: [
      {
        internalType: "contract ERC20BalanceTier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maybeChild_",
        type: "address",
      },
    ],
    name: "isChild",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060016000908155604051610024906100aa565b604051809103906000f080158015610040573d6000803e3d6000fd5b50604080513381526001600160a01b03831660208201529192507f7fac34ecf0b1b374cd9659e3d17db602659d53f1162b1f20142e6c02694aed70910160405180910390a1600280546001600160a01b0319166001600160a01b03929092169190911790556100b7565b610cc8806107db83390190565b610715806100c66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632ea72a4914610046578063ab43ea1f14610083578063fc91a89714610096575b600080fd5b610059610054366004610449565b6100df565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610059610091366004610539565b6101fd565b6100cf6100a43660046105d7565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b604051901515815260200161007a565b600060026000541415610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600090815561016484846102a0565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091558151338152908101929092529192507f7da70c4e5387d7038610b79ca7d304caaef815826e51e67cf247135387a79bce910160405180910390a160016000559392505050565b60003073ffffffffffffffffffffffffffffffffffffffff16632ea72a498360405160200161022c91906105fb565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610257919061064f565b6020604051808303816000875af1158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a91906106c2565b92915050565b6000806102af83850185610539565b6002549091506000906102d79073ffffffffffffffffffffffffffffffffffffffff16610367565b6040517fa61e331500000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063a61e33159061032c9085906004016105fb565b600060405180830381600087803b15801561034657600080fd5b505af115801561035a573d6000803e3d6000fd5b5092979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f091505073ffffffffffffffffffffffffffffffffffffffff8116610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161014a565b919050565b6000806020838503121561045c57600080fd5b823567ffffffffffffffff8082111561047457600080fd5b818501915085601f83011261048857600080fd5b81358181111561049757600080fd5b8660208285010111156104a957600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561050e5761050e6104bb565b60405290565b73ffffffffffffffffffffffffffffffffffffffff8116811461053657600080fd5b50565b600061012080838503121561054d57600080fd5b6040516040810181811067ffffffffffffffff82111715610570576105706104bb565b604052833561057e81610514565b81526020603f8501861361059157600080fd5b6105996104ea565b9285019280878511156105ab57600080fd5b8287015b858110156105c657803583529183019183016105af565b509183019190915250949350505050565b6000602082840312156105e957600080fd5b81356105f481610514565b9392505050565b815173ffffffffffffffffffffffffffffffffffffffff1681526020808301516101208301919081840160005b600881101561064557825182529183019190830190600101610628565b5050505092915050565b600060208083528351808285015260005b8181101561067c57858101830151858201604001528201610660565b8181111561068e576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000602082840312156106d457600080fd5b81516105f48161051456fea2646970667358221220b93bedb9e75951dff98106c5deae613b45b3eef3c93a3bc1f591a44845af6b1664736f6c634300080a0033608060405234801561001057600080fd5b50610ca8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806370230b39146100515780638a200fff1461006f578063a61e331514610084578063e053ea3114610097575b600080fd5b6100596100b8565b60405161006691906107d8565b60405180910390f35b61008261007d3660046108d7565b6100fa565b005b6100826100923660046109a6565b610161565b6100aa6100a5366004610a44565b61035e565b604051908152602001610066565b6100c06107b9565b6000546100e29073ffffffffffffffffffffffffffffffffffffffff16610414565b8060200190518101906100f59190610a61565b905090565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5345545f5449455200000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000547501000000000000000000000000000000000000000000900460ff166101a85760005474010000000000000000000000000000000000000000900460ff16156101ac565b303b155b610238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610158565b6000547501000000000000000000000000000000000000000000900460ff1615801561029f57600080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1675010100000000000000000000000000000000000000001790555b6102ac8260200151610442565b8151600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691821790556040805133815260208101929092527fdc90fed0326ba91706deeac7eb34ac9f8b680734f9d782864dc29704d23bed6a910160405180910390a1801561035a57600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1690555b5050565b600061040e60006104096103706100b8565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152909116906370a0823190602401602060405180830381865afa1580156103e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104049190610ac2565b61052b565b610579565b92915050565b606061040e8260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610619565b60005473ffffffffffffffffffffffffffffffffffffffff161561046857610468610adb565b60006104928260405160200161047e91906107d8565b604051602081830303815290604052610702565b6040805133815273ffffffffffffffffffffffffffffffffffffffff831660208201529192507f18ebb958e85030233374c8eb79c1a72ee418770db7fb47a7de05d30c868ec958910160405180910390a1600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b6000805b600881101561056f5783816008811061054a5761054a610b0a565b602002015183101561055d57905061040e565b8061056781610b39565b91505061052f565b5060089392505050565b60008160088111156105e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4d41585f544945520000000000000000000000000000000000000000000000006044820152606401610158565b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910290811c901b1790565b6060833b806106385750506040805160208101909152600081526106fb565b808411156106565750506040805160208101909152600081526106fb565b838310156106a1576040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260448101849052606401610158565b83830384820360008282106106b657826106b8565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050505b9392505050565b60008061072d836040516020016107199190610bd4565b60405160208183030381529060405261078d565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff8216610787576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b60608151826040516020016107a3929190610be7565b6040516020818303038152906040529050919050565b6040518061010001604052806008906020820280368337509192915050565b6101008101818360005b60088110156108015781518352602092830192909101906001016107e2565b50505092915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461082c57600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156108825761088261082f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108cf576108cf61082f565b604052919050565b6000806000606084860312156108ec57600080fd5b83356108f78161080a565b92506020848101359250604085013567ffffffffffffffff8082111561091c57600080fd5b818701915087601f83011261093057600080fd5b8135818111156109425761094261082f565b610972847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610888565b9150808252888482850101111561098857600080fd5b80848401858401376000848284010152508093505050509250925092565b60006101208083850312156109ba57600080fd5b6040516040810181811067ffffffffffffffff821117156109dd576109dd61082f565b60405283356109eb8161080a565b81526020603f850186136109fe57600080fd5b610a0661085e565b928501928087851115610a1857600080fd5b8287015b85811015610a335780358352918301918301610a1c565b509183019190915250949350505050565b600060208284031215610a5657600080fd5b81356106fb8161080a565b6000610100808385031215610a7557600080fd5b83601f840112610a8457600080fd5b610a8c61085e565b908301908085831115610a9e57600080fd5b845b83811015610ab8578051835260209283019201610aa0565b5095945050505050565b600060208284031215610ad457600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b92577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b6000815160005b81811015610bba5760208185018101518683015201610ba0565b81811115610bc9576000828601525b509290920192915050565b6000815260006106fb6001830184610b99565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f3000000000000000000000000000000000000000000000060058201526000610c6a600e830184610b99565b94935050505056fea2646970667358221220e986178aca10ac2d3fb6e89be55710525f9975c83c98a02bdea63fe800c5db5864736f6c634300080a0033";

type ERC20BalanceTierFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20BalanceTierFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20BalanceTierFactory__factory extends ContractFactory {
  constructor(...args: ERC20BalanceTierFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20BalanceTierFactory> {
    return super.deploy(overrides || {}) as Promise<ERC20BalanceTierFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20BalanceTierFactory {
    return super.attach(address) as ERC20BalanceTierFactory;
  }
  connect(signer: Signer): ERC20BalanceTierFactory__factory {
    return super.connect(signer) as ERC20BalanceTierFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20BalanceTierFactoryInterface {
    return new utils.Interface(_abi) as ERC20BalanceTierFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20BalanceTierFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC20BalanceTierFactory;
  }
}
