/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PoolParamsStruct = {
  poolTokenSymbol: string;
  poolTokenName: string;
  constituentTokens: string[];
  tokenBalances: BigNumberish[];
  tokenWeights: BigNumberish[];
  swapFee: BigNumberish;
};

export type PoolParamsStructOutput = [
  string,
  string,
  string[],
  BigNumber[],
  BigNumber[],
  BigNumber
] & {
  poolTokenSymbol: string;
  poolTokenName: string;
  constituentTokens: string[];
  tokenBalances: BigNumber[];
  tokenWeights: BigNumber[];
  swapFee: BigNumber;
};

export type RightsStruct = {
  canPauseSwapping: boolean;
  canChangeSwapFee: boolean;
  canChangeWeights: boolean;
  canAddRemoveTokens: boolean;
  canWhitelistLPs: boolean;
  canChangeCap: boolean;
};

export type RightsStructOutput = [
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean
] & {
  canPauseSwapping: boolean;
  canChangeSwapFee: boolean;
  canChangeWeights: boolean;
  canAddRemoveTokens: boolean;
  canWhitelistLPs: boolean;
  canChangeCap: boolean;
};

export interface ConfigurableRightsPoolInterface extends utils.Interface {
  functions: {
    "DECIMALS()": FunctionFragment;
    "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS()": FunctionFragment;
    "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD()": FunctionFragment;
    "NAME()": FunctionFragment;
    "addTokenTimeLockInBlocks()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "applyAddToken()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "bFactory()": FunctionFragment;
    "bPool()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bspCap()": FunctionFragment;
    "burnPoolShareFromLib(uint256)": FunctionFragment;
    "canProvideLiquidity(address)": FunctionFragment;
    "commitAddToken(address,uint256,uint256)": FunctionFragment;
    "createPool(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseApproval(address,uint256)": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "exitswapExternAmountOut(address,uint256,uint256)": FunctionFragment;
    "exitswapPoolAmountIn(address,uint256,uint256)": FunctionFragment;
    "getBalancerSafeMathVersion()": FunctionFragment;
    "getController()": FunctionFragment;
    "getDenormalizedWeight(address)": FunctionFragment;
    "getRightsManagerVersion()": FunctionFragment;
    "getSmartPoolManagerVersion()": FunctionFragment;
    "gradualUpdate()": FunctionFragment;
    "hasPermission(uint8)": FunctionFragment;
    "increaseApproval(address,uint256)": FunctionFragment;
    "isPublicSwap()": FunctionFragment;
    "joinPool(uint256,uint256[])": FunctionFragment;
    "joinswapExternAmountIn(address,uint256,uint256)": FunctionFragment;
    "joinswapPoolAmountOut(address,uint256,uint256)": FunctionFragment;
    "minimumWeightChangeBlockPeriod()": FunctionFragment;
    "mintPoolShareFromLib(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "newToken()": FunctionFragment;
    "pokeWeights()": FunctionFragment;
    "pullPoolShareFromLib(address,uint256)": FunctionFragment;
    "pushPoolShareFromLib(address,uint256)": FunctionFragment;
    "removeToken(address)": FunctionFragment;
    "removeWhitelistedLiquidityProvider(address)": FunctionFragment;
    "rights()": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setPublicSwap(bool)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateWeight(address,uint256)": FunctionFragment;
    "updateWeightsGradually(uint256[],uint256,uint256)": FunctionFragment;
    "whitelistLiquidityProvider(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTokenTimeLockInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "applyAddToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bFactory", values?: undefined): string;
  encodeFunctionData(functionFragment: "bPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "bspCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnPoolShareFromLib",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canProvideLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commitAddToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapExternAmountOut",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancerSafeMathVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRightsManagerVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSmartPoolManagerVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gradualUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapPoolAmountOut",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumWeightChangeBlockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintPoolShareFromLib",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "newToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokeWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullPoolShareFromLib",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pushPoolShareFromLib",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedLiquidityProvider",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rights", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSwap",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeight",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeightsGradually",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistLiquidityProvider",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokenTimeLockInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyAddToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bspCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canProvideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitAddToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitswapExternAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancerSafeMathVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRightsManagerVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmartPoolManagerVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gradualUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapPoolAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumWeightChangeBlockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokeWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeightsGradually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistLiquidityProvider",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CapChanged(address,uint256,uint256)": EventFragment;
    "LogCall(bytes4,address,bytes)": EventFragment;
    "LogExit(address,address,uint256)": EventFragment;
    "LogJoin(address,address,uint256)": EventFragment;
    "NewTokenCommitted(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogJoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTokenCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type CapChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { caller: string; oldCap: BigNumber; newCap: BigNumber }
>;

export type CapChangedEventFilter = TypedEventFilter<CapChangedEvent>;

export type LogCallEvent = TypedEvent<
  [string, string, string],
  { sig: string; caller: string; data: string }
>;

export type LogCallEventFilter = TypedEventFilter<LogCallEvent>;

export type LogExitEvent = TypedEvent<
  [string, string, BigNumber],
  { caller: string; tokenOut: string; tokenAmountOut: BigNumber }
>;

export type LogExitEventFilter = TypedEventFilter<LogExitEvent>;

export type LogJoinEvent = TypedEvent<
  [string, string, BigNumber],
  { caller: string; tokenIn: string; tokenAmountIn: BigNumber }
>;

export type LogJoinEventFilter = TypedEventFilter<LogJoinEvent>;

export type NewTokenCommittedEvent = TypedEvent<
  [string, string, string],
  { token: string; pool: string; caller: string }
>;

export type NewTokenCommittedEventFilter =
  TypedEventFilter<NewTokenCommittedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ConfigurableRightsPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConfigurableRightsPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    addTokenTimeLockInBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyAddToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bFactory(overrides?: CallOverrides): Promise<[string]>;

    bPool(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bspCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnPoolShareFromLib(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canProvideLiquidity(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    commitAddToken(
      token: string,
      balance: BigNumberish,
      denormalizedWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createPool(uint256)"(
      initialSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseApproval(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalancerSafeMathVersion(overrides?: CallOverrides): Promise<[string]>;

    getController(overrides?: CallOverrides): Promise<[string]>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRightsManagerVersion(overrides?: CallOverrides): Promise<[string]>;

    getSmartPoolManagerVersion(overrides?: CallOverrides): Promise<[string]>;

    gradualUpdate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startBlock: BigNumber; endBlock: BigNumber }
    >;

    hasPermission(
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseApproval(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPublicSwap(overrides?: CallOverrides): Promise<[boolean]>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumWeightChangeBlockPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintPoolShareFromLib(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    newToken(
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber] & {
        addr: string;
        isCommitted: boolean;
        commitBlock: BigNumber;
        denorm: BigNumber;
        balance: BigNumber;
      }
    >;

    pokeWeights(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pullPoolShareFromLib(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushPoolShareFromLib(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWhitelistedLiquidityProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rights(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      }
    >;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicSwap(
      publicSwap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWeight(
      token: string,
      newWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistLiquidityProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DECIMALS(overrides?: CallOverrides): Promise<number>;

  DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  addTokenTimeLockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyAddToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bFactory(overrides?: CallOverrides): Promise<string>;

  bPool(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bspCap(overrides?: CallOverrides): Promise<BigNumber>;

  burnPoolShareFromLib(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canProvideLiquidity(
    provider: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  commitAddToken(
    token: string,
    balance: BigNumberish,
    denormalizedWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createPool(uint256)"(
    initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createPool(uint256,uint256,uint256)"(
    initialSupply: BigNumberish,
    minimumWeightChangeBlockPeriodParam: BigNumberish,
    addTokenTimeLockInBlocksParam: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseApproval(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitPool(
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitswapExternAmountOut(
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    maxPoolAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitswapPoolAmountIn(
    tokenOut: string,
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalancerSafeMathVersion(overrides?: CallOverrides): Promise<string>;

  getController(overrides?: CallOverrides): Promise<string>;

  getDenormalizedWeight(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRightsManagerVersion(overrides?: CallOverrides): Promise<string>;

  getSmartPoolManagerVersion(overrides?: CallOverrides): Promise<string>;

  gradualUpdate(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startBlock: BigNumber; endBlock: BigNumber }
  >;

  hasPermission(
    permission: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseApproval(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

  joinPool(
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinswapExternAmountIn(
    tokenIn: string,
    tokenAmountIn: BigNumberish,
    minPoolAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinswapPoolAmountOut(
    tokenIn: string,
    poolAmountOut: BigNumberish,
    maxAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumWeightChangeBlockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  mintPoolShareFromLib(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  newToken(
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, BigNumber] & {
      addr: string;
      isCommitted: boolean;
      commitBlock: BigNumber;
      denorm: BigNumber;
      balance: BigNumber;
    }
  >;

  pokeWeights(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pullPoolShareFromLib(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushPoolShareFromLib(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWhitelistedLiquidityProvider(
    provider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rights(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean, boolean, boolean] & {
      canPauseSwapping: boolean;
      canChangeSwapFee: boolean;
      canChangeWeights: boolean;
      canAddRemoveTokens: boolean;
      canWhitelistLPs: boolean;
      canChangeCap: boolean;
    }
  >;

  setCap(
    newCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicSwap(
    publicSwap: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWeight(
    token: string,
    newWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWeightsGradually(
    newWeights: BigNumberish[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistLiquidityProvider(
    provider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DECIMALS(overrides?: CallOverrides): Promise<number>;

    DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    addTokenTimeLockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyAddToken(overrides?: CallOverrides): Promise<void>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bFactory(overrides?: CallOverrides): Promise<string>;

    bPool(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bspCap(overrides?: CallOverrides): Promise<BigNumber>;

    burnPoolShareFromLib(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canProvideLiquidity(
      provider: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commitAddToken(
      token: string,
      balance: BigNumberish,
      denormalizedWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createPool(uint256)"(
      initialSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseApproval(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalancerSafeMathVersion(overrides?: CallOverrides): Promise<string>;

    getController(overrides?: CallOverrides): Promise<string>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRightsManagerVersion(overrides?: CallOverrides): Promise<string>;

    getSmartPoolManagerVersion(overrides?: CallOverrides): Promise<string>;

    gradualUpdate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startBlock: BigNumber; endBlock: BigNumber }
    >;

    hasPermission(
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseApproval(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumWeightChangeBlockPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPoolShareFromLib(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    newToken(
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, BigNumber] & {
        addr: string;
        isCommitted: boolean;
        commitBlock: BigNumber;
        denorm: BigNumber;
        balance: BigNumber;
      }
    >;

    pokeWeights(overrides?: CallOverrides): Promise<void>;

    pullPoolShareFromLib(
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pushPoolShareFromLib(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(token: string, overrides?: CallOverrides): Promise<void>;

    removeWhitelistedLiquidityProvider(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rights(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      }
    >;

    setCap(newCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setController(newOwner: string, overrides?: CallOverrides): Promise<void>;

    setPublicSwap(
      publicSwap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFee(swapFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateWeight(
      token: string,
      newWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistLiquidityProvider(
      provider: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "CapChanged(address,uint256,uint256)"(
      caller?: string | null,
      oldCap?: null,
      newCap?: null
    ): CapChangedEventFilter;
    CapChanged(
      caller?: string | null,
      oldCap?: null,
      newCap?: null
    ): CapChangedEventFilter;

    "LogCall(bytes4,address,bytes)"(
      sig?: BytesLike | null,
      caller?: string | null,
      data?: null
    ): LogCallEventFilter;
    LogCall(
      sig?: BytesLike | null,
      caller?: string | null,
      data?: null
    ): LogCallEventFilter;

    "LogExit(address,address,uint256)"(
      caller?: string | null,
      tokenOut?: string | null,
      tokenAmountOut?: null
    ): LogExitEventFilter;
    LogExit(
      caller?: string | null,
      tokenOut?: string | null,
      tokenAmountOut?: null
    ): LogExitEventFilter;

    "LogJoin(address,address,uint256)"(
      caller?: string | null,
      tokenIn?: string | null,
      tokenAmountIn?: null
    ): LogJoinEventFilter;
    LogJoin(
      caller?: string | null,
      tokenIn?: string | null,
      tokenAmountIn?: null
    ): LogJoinEventFilter;

    "NewTokenCommitted(address,address,address)"(
      token?: string | null,
      pool?: string | null,
      caller?: string | null
    ): NewTokenCommittedEventFilter;
    NewTokenCommitted(
      token?: string | null,
      pool?: string | null,
      caller?: string | null
    ): NewTokenCommittedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenTimeLockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyAddToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bFactory(overrides?: CallOverrides): Promise<BigNumber>;

    bPool(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bspCap(overrides?: CallOverrides): Promise<BigNumber>;

    burnPoolShareFromLib(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canProvideLiquidity(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitAddToken(
      token: string,
      balance: BigNumberish,
      denormalizedWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createPool(uint256)"(
      initialSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseApproval(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalancerSafeMathVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<BigNumber>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRightsManagerVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getSmartPoolManagerVersion(overrides?: CallOverrides): Promise<BigNumber>;

    gradualUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    hasPermission(
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseApproval(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPublicSwap(overrides?: CallOverrides): Promise<BigNumber>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumWeightChangeBlockPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPoolShareFromLib(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    newToken(overrides?: CallOverrides): Promise<BigNumber>;

    pokeWeights(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pullPoolShareFromLib(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushPoolShareFromLib(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWhitelistedLiquidityProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rights(overrides?: CallOverrides): Promise<BigNumber>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicSwap(
      publicSwap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWeight(
      token: string,
      newWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistLiquidityProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokenTimeLockInBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyAddToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bspCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnPoolShareFromLib(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canProvideLiquidity(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitAddToken(
      token: string,
      balance: BigNumberish,
      denormalizedWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createPool(uint256)"(
      initialSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: BigNumberish,
      minimumWeightChangeBlockPeriodParam: BigNumberish,
      addTokenTimeLockInBlocksParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseApproval(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitPool(
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitswapExternAmountOut(
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitswapPoolAmountIn(
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalancerSafeMathVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDenormalizedWeight(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRightsManagerVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSmartPoolManagerVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gradualUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPermission(
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseApproval(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPublicSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinswapExternAmountIn(
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinswapPoolAmountOut(
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumWeightChangeBlockPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintPoolShareFromLib(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pokeWeights(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pullPoolShareFromLib(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushPoolShareFromLib(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWhitelistedLiquidityProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSwap(
      publicSwap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWeight(
      token: string,
      newWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWeightsGradually(
      newWeights: BigNumberish[],
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistLiquidityProvider(
      provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
