/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PoolParamsStruct = {
  poolTokenSymbol: string;
  poolTokenName: string;
  constituentTokens: string[];
  tokenBalances: BigNumberish[];
  tokenWeights: BigNumberish[];
  swapFee: BigNumberish;
};

export type PoolParamsStructOutput = [
  string,
  string,
  string[],
  BigNumber[],
  BigNumber[],
  BigNumber
] & {
  poolTokenSymbol: string;
  poolTokenName: string;
  constituentTokens: string[];
  tokenBalances: BigNumber[];
  tokenWeights: BigNumber[];
  swapFee: BigNumber;
};

export type RightsStruct = {
  canPauseSwapping: boolean;
  canChangeSwapFee: boolean;
  canChangeWeights: boolean;
  canAddRemoveTokens: boolean;
  canWhitelistLPs: boolean;
  canChangeCap: boolean;
};

export type RightsStructOutput = [
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean
] & {
  canPauseSwapping: boolean;
  canChangeSwapFee: boolean;
  canChangeWeights: boolean;
  canAddRemoveTokens: boolean;
  canWhitelistLPs: boolean;
  canChangeCap: boolean;
};

export interface CRPFactoryInterface extends utils.Interface {
  functions: {
    "isCrp(address)": FunctionFragment;
    "newCrp(address,(string,string,address[],uint256[],uint256[],uint256),(bool,bool,bool,bool,bool,bool))": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isCrp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "newCrp",
    values: [string, PoolParamsStruct, RightsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "isCrp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newCrp", data: BytesLike): Result;

  events: {
    "LogNewCrp(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNewCrp"): EventFragment;
}

export type LogNewCrpEvent = TypedEvent<
  [string, string],
  { caller: string; pool: string }
>;

export type LogNewCrpEventFilter = TypedEventFilter<LogNewCrpEvent>;

export interface CRPFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CRPFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isCrp(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    newCrp(
      factoryAddress: string,
      poolParams: PoolParamsStruct,
      rights: RightsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  isCrp(addr: string, overrides?: CallOverrides): Promise<boolean>;

  newCrp(
    factoryAddress: string,
    poolParams: PoolParamsStruct,
    rights: RightsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isCrp(addr: string, overrides?: CallOverrides): Promise<boolean>;

    newCrp(
      factoryAddress: string,
      poolParams: PoolParamsStruct,
      rights: RightsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "LogNewCrp(address,address)"(
      caller?: string | null,
      pool?: string | null
    ): LogNewCrpEventFilter;
    LogNewCrp(
      caller?: string | null,
      pool?: string | null
    ): LogNewCrpEventFilter;
  };

  estimateGas: {
    isCrp(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    newCrp(
      factoryAddress: string,
      poolParams: PoolParamsStruct,
      rights: RightsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isCrp(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newCrp(
      factoryAddress: string,
      poolParams: PoolParamsStruct,
      rights: RightsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
