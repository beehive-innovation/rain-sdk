/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TrustConstructionConfigStruct = {
  crpFactory: string;
  balancerFactory: string;
  redeemableERC20Factory: string;
  seedERC20Factory: string;
  creatorFundsReleaseTimeout: BigNumberish;
  maxRaiseDuration: BigNumberish;
};

export type TrustConstructionConfigStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  crpFactory: string;
  balancerFactory: string;
  redeemableERC20Factory: string;
  seedERC20Factory: string;
  creatorFundsReleaseTimeout: BigNumber;
  maxRaiseDuration: BigNumber;
};

export type TrustConfigStruct = {
  reserve: string;
  reserveInit: BigNumberish;
  initialValuation: BigNumberish;
  finalValuation: BigNumberish;
  minimumTradingDuration: BigNumberish;
  creator: string;
  minimumCreatorRaise: BigNumberish;
  seederFee: BigNumberish;
  redeemInit: BigNumberish;
};

export type TrustConfigStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  reserve: string;
  reserveInit: BigNumber;
  initialValuation: BigNumber;
  finalValuation: BigNumber;
  minimumTradingDuration: BigNumber;
  creator: string;
  minimumCreatorRaise: BigNumber;
  seederFee: BigNumber;
  redeemInit: BigNumber;
};

export type ERC20ConfigStruct = {
  name: string;
  symbol: string;
  distributor: string;
  initialSupply: BigNumberish;
};

export type ERC20ConfigStructOutput = [string, string, string, BigNumber] & {
  name: string;
  symbol: string;
  distributor: string;
  initialSupply: BigNumber;
};

export type TrustRedeemableERC20ConfigStruct = {
  erc20Config: ERC20ConfigStruct;
  tier: string;
  minimumTier: BigNumberish;
};

export type TrustRedeemableERC20ConfigStructOutput = [
  ERC20ConfigStructOutput,
  string,
  BigNumber
] & {
  erc20Config: ERC20ConfigStructOutput;
  tier: string;
  minimumTier: BigNumber;
};

export type TrustSeedERC20ConfigStruct = {
  seeder: string;
  cooldownDuration: BigNumberish;
  erc20Config: ERC20ConfigStruct;
};

export type TrustSeedERC20ConfigStructOutput = [
  string,
  BigNumber,
  ERC20ConfigStructOutput
] & {
  seeder: string;
  cooldownDuration: BigNumber;
  erc20Config: ERC20ConfigStructOutput;
};

export interface TrustInterface extends utils.Interface {
  functions: {
    "blockNumberForPhase(uint32[8],uint256)": FunctionFragment;
    "creatorFundsRelease(address,uint256)": FunctionFragment;
    "crp()": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "enableCreatorFundsRelease()": FunctionFragment;
    "endDutchAuction()": FunctionFragment;
    "endDutchAuctionAndTransfer()": FunctionFragment;
    "getDistributionStatus()": FunctionFragment;
    "initialize((address,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256),((string,string,address,uint256),address,uint256),(address,uint256,(string,string,address,uint256)))": FunctionFragment;
    "phaseAtBlockNumber(uint32[8],uint256)": FunctionFragment;
    "phaseBlocks(uint256)": FunctionFragment;
    "reserve()": FunctionFragment;
    "saleStatus()": FunctionFragment;
    "startDutchAuction()": FunctionFragment;
    "token()": FunctionFragment;
    "transferAuctionTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockNumberForPhase",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorFundsRelease",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "crp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableCreatorFundsRelease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endDutchAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endDutchAuctionAndTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      TrustConfigStruct,
      TrustRedeemableERC20ConfigStruct,
      TrustSeedERC20ConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "phaseAtBlockNumber",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "phaseBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "saleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startDutchAuction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAuctionTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "blockNumberForPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorFundsRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCreatorFundsRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endDutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endDutchAuctionAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phaseAtBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phaseBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startDutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAuctionTokens",
    data: BytesLike
  ): Result;

  events: {
    "Construction(address,address,address,address,address,address,uint256,uint256)": EventFragment;
    "CreatorFundsRelease(address,address,uint256)": EventFragment;
    "EndDutchAuction(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Initialize(address,tuple,address,address,address,uint256)": EventFragment;
    "PhaseScheduled(address,uint256,uint256)": EventFragment;
    "StartDutchAuction(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Construction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorFundsRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndDutchAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartDutchAuction"): EventFragment;
}

export type ConstructionEvent = TypedEvent<
  [string, string, string, string, string, string, BigNumber, BigNumber],
  {
    sender: string;
    balancerFactory: string;
    crpFactory: string;
    redeemableERC20Factory: string;
    seedERC20Factory: string;
    bPoolFeeEscrow: string;
    creatorFundsReleaseTimeout: BigNumber;
    maxRaiseDuration: BigNumber;
  }
>;

export type ConstructionEventFilter = TypedEventFilter<ConstructionEvent>;

export type CreatorFundsReleaseEvent = TypedEvent<
  [string, string, BigNumber],
  { sender: string; token: string; amount: BigNumber }
>;

export type CreatorFundsReleaseEventFilter =
  TypedEventFilter<CreatorFundsReleaseEvent>;

export type EndDutchAuctionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    finalBalance: BigNumber;
    seederPay: BigNumber;
    creatorPay: BigNumber;
    tokenPay: BigNumber;
    poolDust: BigNumber;
  }
>;

export type EndDutchAuctionEventFilter = TypedEventFilter<EndDutchAuctionEvent>;

export type InitializeEvent = TypedEvent<
  [string, TrustConfigStructOutput, string, string, string, BigNumber],
  {
    sender: string;
    config: TrustConfigStructOutput;
    crp: string;
    seeder: string;
    redeemableERC20: string;
    successBalance: BigNumber;
  }
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export type PhaseScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; newPhase: BigNumber; scheduledBlock: BigNumber }
>;

export type PhaseScheduledEventFilter = TypedEventFilter<PhaseScheduledEvent>;

export type StartDutchAuctionEvent = TypedEvent<
  [string, string, BigNumber],
  { sender: string; pool: string; finalAuctionBlock: BigNumber }
>;

export type StartDutchAuctionEventFilter =
  TypedEventFilter<StartDutchAuctionEvent>;

export interface Trust extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrustInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockNumberForPhase(
      phaseBlocks_: BigNumberish[],
      phase_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creatorFundsRelease(
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crp(overrides?: CallOverrides): Promise<[string]>;

    currentPhase(overrides?: CallOverrides): Promise<[BigNumber]>;

    enableCreatorFundsRelease(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endDutchAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endDutchAuctionAndTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDistributionStatus(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      config_: TrustConfigStruct,
      trustRedeemableERC20Config_: TrustRedeemableERC20ConfigStruct,
      trustSeedERC20Config_: TrustSeedERC20ConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    phaseAtBlockNumber(
      phaseBlocks_: BigNumberish[],
      blockNumber_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    phaseBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    saleStatus(overrides?: CallOverrides): Promise<[number]>;

    startDutchAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferAuctionTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  blockNumberForPhase(
    phaseBlocks_: BigNumberish[],
    phase_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creatorFundsRelease(
    token_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crp(overrides?: CallOverrides): Promise<string>;

  currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

  enableCreatorFundsRelease(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endDutchAuction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endDutchAuctionAndTransfer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDistributionStatus(overrides?: CallOverrides): Promise<number>;

  initialize(
    config_: TrustConfigStruct,
    trustRedeemableERC20Config_: TrustRedeemableERC20ConfigStruct,
    trustSeedERC20Config_: TrustSeedERC20ConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  phaseAtBlockNumber(
    phaseBlocks_: BigNumberish[],
    blockNumber_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  phaseBlocks(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  reserve(overrides?: CallOverrides): Promise<string>;

  saleStatus(overrides?: CallOverrides): Promise<number>;

  startDutchAuction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferAuctionTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    blockNumberForPhase(
      phaseBlocks_: BigNumberish[],
      phase_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorFundsRelease(
      token_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    crp(overrides?: CallOverrides): Promise<string>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    enableCreatorFundsRelease(overrides?: CallOverrides): Promise<void>;

    endDutchAuction(overrides?: CallOverrides): Promise<void>;

    endDutchAuctionAndTransfer(overrides?: CallOverrides): Promise<void>;

    getDistributionStatus(overrides?: CallOverrides): Promise<number>;

    initialize(
      config_: TrustConfigStruct,
      trustRedeemableERC20Config_: TrustRedeemableERC20ConfigStruct,
      trustSeedERC20Config_: TrustSeedERC20ConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    phaseAtBlockNumber(
      phaseBlocks_: BigNumberish[],
      blockNumber_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phaseBlocks(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    reserve(overrides?: CallOverrides): Promise<string>;

    saleStatus(overrides?: CallOverrides): Promise<number>;

    startDutchAuction(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferAuctionTokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Construction(address,address,address,address,address,address,uint256,uint256)"(
      sender?: null,
      balancerFactory?: null,
      crpFactory?: null,
      redeemableERC20Factory?: null,
      seedERC20Factory?: null,
      bPoolFeeEscrow?: null,
      creatorFundsReleaseTimeout?: null,
      maxRaiseDuration?: null
    ): ConstructionEventFilter;
    Construction(
      sender?: null,
      balancerFactory?: null,
      crpFactory?: null,
      redeemableERC20Factory?: null,
      seedERC20Factory?: null,
      bPoolFeeEscrow?: null,
      creatorFundsReleaseTimeout?: null,
      maxRaiseDuration?: null
    ): ConstructionEventFilter;

    "CreatorFundsRelease(address,address,uint256)"(
      sender?: null,
      token?: null,
      amount?: null
    ): CreatorFundsReleaseEventFilter;
    CreatorFundsRelease(
      sender?: null,
      token?: null,
      amount?: null
    ): CreatorFundsReleaseEventFilter;

    "EndDutchAuction(address,uint256,uint256,uint256,uint256,uint256)"(
      sender?: null,
      finalBalance?: null,
      seederPay?: null,
      creatorPay?: null,
      tokenPay?: null,
      poolDust?: null
    ): EndDutchAuctionEventFilter;
    EndDutchAuction(
      sender?: null,
      finalBalance?: null,
      seederPay?: null,
      creatorPay?: null,
      tokenPay?: null,
      poolDust?: null
    ): EndDutchAuctionEventFilter;

    "Initialize(address,tuple,address,address,address,uint256)"(
      sender?: null,
      config?: null,
      crp?: null,
      seeder?: null,
      redeemableERC20?: null,
      successBalance?: null
    ): InitializeEventFilter;
    Initialize(
      sender?: null,
      config?: null,
      crp?: null,
      seeder?: null,
      redeemableERC20?: null,
      successBalance?: null
    ): InitializeEventFilter;

    "PhaseScheduled(address,uint256,uint256)"(
      sender?: null,
      newPhase?: null,
      scheduledBlock?: null
    ): PhaseScheduledEventFilter;
    PhaseScheduled(
      sender?: null,
      newPhase?: null,
      scheduledBlock?: null
    ): PhaseScheduledEventFilter;

    "StartDutchAuction(address,address,uint256)"(
      sender?: null,
      pool?: null,
      finalAuctionBlock?: null
    ): StartDutchAuctionEventFilter;
    StartDutchAuction(
      sender?: null,
      pool?: null,
      finalAuctionBlock?: null
    ): StartDutchAuctionEventFilter;
  };

  estimateGas: {
    blockNumberForPhase(
      phaseBlocks_: BigNumberish[],
      phase_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorFundsRelease(
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crp(overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    enableCreatorFundsRelease(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endDutchAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endDutchAuctionAndTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDistributionStatus(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      config_: TrustConfigStruct,
      trustRedeemableERC20Config_: TrustRedeemableERC20ConfigStruct,
      trustSeedERC20Config_: TrustSeedERC20ConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    phaseAtBlockNumber(
      phaseBlocks_: BigNumberish[],
      blockNumber_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phaseBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    saleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    startDutchAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferAuctionTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockNumberForPhase(
      phaseBlocks_: BigNumberish[],
      phase_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorFundsRelease(
      token_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableCreatorFundsRelease(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endDutchAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endDutchAuctionAndTransfer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDistributionStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      config_: TrustConfigStruct,
      trustRedeemableERC20Config_: TrustRedeemableERC20ConfigStruct,
      trustSeedERC20Config_: TrustSeedERC20ConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    phaseAtBlockNumber(
      phaseBlocks_: BigNumberish[],
      blockNumber_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phaseBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startDutchAuction(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAuctionTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
