/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TimeBoundStruct = {
  baseDuration: BigNumberish;
  maxExtraTime: BigNumberish;
};

export type TimeBoundStructOutput = [number, number] & {
  baseDuration: number;
  maxExtraTime: number;
};

export interface SeedDanceTestInterface extends utils.Interface {
  functions: {
    "canRevealUntil(uint256,uint256,(uint32,uint32),address)": FunctionFragment;
    "commit(uint256)": FunctionFragment;
    "reveal((uint32,uint32),uint256)": FunctionFragment;
    "sharedSeed()": FunctionFragment;
    "start(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canRevealUntil",
    values: [BigNumberish, BigNumberish, TimeBoundStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [TimeBoundStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedSeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "start", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "canRevealUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sharedSeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;

  events: {
    "Commit(address,uint256)": EventFragment;
    "Reveal(address,uint256,uint256)": EventFragment;
    "Start(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Commit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reveal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
}

export type CommitEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; commitment: BigNumber }
>;

export type CommitEventFilter = TypedEventFilter<CommitEvent>;

export type RevealEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; secret: BigNumber; newSeed: BigNumber }
>;

export type RevealEventFilter = TypedEventFilter<RevealEvent>;

export type StartEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; initialSeed: BigNumber }
>;

export type StartEventFilter = TypedEventFilter<StartEvent>;

export interface SeedDanceTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeedDanceTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canRevealUntil(
      seed_: BigNumberish,
      start_: BigNumberish,
      timeBound_: TimeBoundStruct,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { until_: BigNumber }>;

    commit(
      commitment_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reveal(
      timeBound_: TimeBoundStruct,
      secret_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharedSeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    start(
      initialSeed_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  canRevealUntil(
    seed_: BigNumberish,
    start_: BigNumberish,
    timeBound_: TimeBoundStruct,
    owner_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  commit(
    commitment_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reveal(
    timeBound_: TimeBoundStruct,
    secret_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharedSeed(overrides?: CallOverrides): Promise<BigNumber>;

  start(
    initialSeed_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canRevealUntil(
      seed_: BigNumberish,
      start_: BigNumberish,
      timeBound_: TimeBoundStruct,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commit(commitment_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    reveal(
      timeBound_: TimeBoundStruct,
      secret_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sharedSeed(overrides?: CallOverrides): Promise<BigNumber>;

    start(initialSeed_: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Commit(address,uint256)"(
      sender?: null,
      commitment?: null
    ): CommitEventFilter;
    Commit(sender?: null, commitment?: null): CommitEventFilter;

    "Reveal(address,uint256,uint256)"(
      sender?: null,
      secret?: null,
      newSeed?: null
    ): RevealEventFilter;
    Reveal(sender?: null, secret?: null, newSeed?: null): RevealEventFilter;

    "Start(address,uint256)"(
      sender?: null,
      initialSeed?: null
    ): StartEventFilter;
    Start(sender?: null, initialSeed?: null): StartEventFilter;
  };

  estimateGas: {
    canRevealUntil(
      seed_: BigNumberish,
      start_: BigNumberish,
      timeBound_: TimeBoundStruct,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commit(
      commitment_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reveal(
      timeBound_: TimeBoundStruct,
      secret_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharedSeed(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      initialSeed_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canRevealUntil(
      seed_: BigNumberish,
      start_: BigNumberish,
      timeBound_: TimeBoundStruct,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commit(
      commitment_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reveal(
      timeBound_: TimeBoundStruct,
      secret_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharedSeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      initialSeed_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
