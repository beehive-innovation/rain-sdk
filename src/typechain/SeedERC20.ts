/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ERC20ConfigStruct = {
  name: string;
  symbol: string;
  distributor: string;
  initialSupply: BigNumberish;
};

export type ERC20ConfigStructOutput = [string, string, string, BigNumber] & {
  name: string;
  symbol: string;
  distributor: string;
  initialSupply: BigNumber;
};

export type SeedERC20ConfigStruct = {
  reserve: string;
  recipient: string;
  seedPrice: BigNumberish;
  cooldownDuration: BigNumberish;
  erc20Config: ERC20ConfigStruct;
};

export type SeedERC20ConfigStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  ERC20ConfigStructOutput
] & {
  reserve: string;
  recipient: string;
  seedPrice: BigNumber;
  cooldownDuration: BigNumber;
  erc20Config: ERC20ConfigStructOutput;
};

export interface SeedERC20Interface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blockNumberForPhase(uint32[8],uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "highwater()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize((address,address,uint256,uint256,(string,string,address,uint256)))": FunctionFragment;
    "name()": FunctionFragment;
    "newTreasuryAsset(address)": FunctionFragment;
    "phaseAtBlockNumber(uint32[8],uint256)": FunctionFragment;
    "phaseBlocks(uint256)": FunctionFragment;
    "pullERC20(uint256)": FunctionFragment;
    "redeem(uint256,uint256)": FunctionFragment;
    "seed(uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unseed(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blockNumberForPhase",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "highwater", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [SeedERC20ConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newTreasuryAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "phaseAtBlockNumber",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "phaseBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pullERC20",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unseed",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockNumberForPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "highwater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newTreasuryAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phaseAtBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phaseBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pullERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unseed", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CooldownInitialize(address,uint256)": EventFragment;
    "CooldownTriggered(address,uint256)": EventFragment;
    "ERC20PullInitialize(address,address,address)": EventFragment;
    "Initialize(address,address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PhaseScheduled(address,uint256,uint256)": EventFragment;
    "Redeem(address,address,uint256,uint256)": EventFragment;
    "Seed(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TreasuryAsset(address,address)": EventFragment;
    "Unseed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CooldownInitialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CooldownTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20PullInitialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Seed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unseed"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type CooldownInitializeEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; cooldownDuration: BigNumber }
>;

export type CooldownInitializeEventFilter =
  TypedEventFilter<CooldownInitializeEvent>;

export type CooldownTriggeredEvent = TypedEvent<
  [string, BigNumber],
  { caller: string; cooldown: BigNumber }
>;

export type CooldownTriggeredEventFilter =
  TypedEventFilter<CooldownTriggeredEvent>;

export type ERC20PullInitializeEvent = TypedEvent<
  [string, string, string],
  { sender: string; tokenSender: string; token: string }
>;

export type ERC20PullInitializeEventFilter =
  TypedEventFilter<ERC20PullInitializeEvent>;

export type InitializeEvent = TypedEvent<
  [string, string, string, BigNumber],
  { sender: string; recipient: string; reserve: string; seedPrice: BigNumber }
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type PhaseScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; newPhase: BigNumber; scheduledBlock: BigNumber }
>;

export type PhaseScheduledEventFilter = TypedEventFilter<PhaseScheduledEvent>;

export type RedeemEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    sender: string;
    treasuryAsset: string;
    redeemAmount: BigNumber;
    assetAmount: BigNumber;
  }
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export type SeedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; tokensSeeded: BigNumber; reserveReceived: BigNumber }
>;

export type SeedEventFilter = TypedEventFilter<SeedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type TreasuryAssetEvent = TypedEvent<
  [string, string],
  { sender: string; asset: string }
>;

export type TreasuryAssetEventFilter = TypedEventFilter<TreasuryAssetEvent>;

export type UnseedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; tokensUnseeded: BigNumber; reserveReturned: BigNumber }
>;

export type UnseedEventFilter = TypedEventFilter<UnseedEvent>;

export interface SeedERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeedERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blockNumberForPhase(
      phaseBlocks_: BigNumberish[],
      phase_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    highwater(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      config_: SeedERC20ConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    newTreasuryAsset(
      newTreasuryAsset_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    phaseAtBlockNumber(
      phaseBlocks_: BigNumberish[],
      blockNumber_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    phaseBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    pullERC20(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      units_: BigNumberish,
      safetyRelease_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seed(
      minimumUnits_: BigNumberish,
      desiredUnits_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unseed(
      units_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blockNumberForPhase(
    phaseBlocks_: BigNumberish[],
    phase_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  highwater(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    config_: SeedERC20ConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  newTreasuryAsset(
    newTreasuryAsset_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  phaseAtBlockNumber(
    phaseBlocks_: BigNumberish[],
    blockNumber_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  phaseBlocks(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  pullERC20(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    units_: BigNumberish,
    safetyRelease_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seed(
    minimumUnits_: BigNumberish,
    desiredUnits_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unseed(
    units_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockNumberForPhase(
      phaseBlocks_: BigNumberish[],
      phase_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    highwater(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      config_: SeedERC20ConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    newTreasuryAsset(
      newTreasuryAsset_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    phaseAtBlockNumber(
      phaseBlocks_: BigNumberish[],
      blockNumber_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phaseBlocks(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    pullERC20(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    redeem(
      units_: BigNumberish,
      safetyRelease_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    seed(
      minimumUnits_: BigNumberish,
      desiredUnits_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unseed(units_: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "CooldownInitialize(address,uint256)"(
      sender?: null,
      cooldownDuration?: null
    ): CooldownInitializeEventFilter;
    CooldownInitialize(
      sender?: null,
      cooldownDuration?: null
    ): CooldownInitializeEventFilter;

    "CooldownTriggered(address,uint256)"(
      caller?: null,
      cooldown?: null
    ): CooldownTriggeredEventFilter;
    CooldownTriggered(
      caller?: null,
      cooldown?: null
    ): CooldownTriggeredEventFilter;

    "ERC20PullInitialize(address,address,address)"(
      sender?: null,
      tokenSender?: null,
      token?: null
    ): ERC20PullInitializeEventFilter;
    ERC20PullInitialize(
      sender?: null,
      tokenSender?: null,
      token?: null
    ): ERC20PullInitializeEventFilter;

    "Initialize(address,address,address,uint256)"(
      sender?: null,
      recipient?: null,
      reserve?: null,
      seedPrice?: null
    ): InitializeEventFilter;
    Initialize(
      sender?: null,
      recipient?: null,
      reserve?: null,
      seedPrice?: null
    ): InitializeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PhaseScheduled(address,uint256,uint256)"(
      sender?: null,
      newPhase?: null,
      scheduledBlock?: null
    ): PhaseScheduledEventFilter;
    PhaseScheduled(
      sender?: null,
      newPhase?: null,
      scheduledBlock?: null
    ): PhaseScheduledEventFilter;

    "Redeem(address,address,uint256,uint256)"(
      sender?: null,
      treasuryAsset?: null,
      redeemAmount?: null,
      assetAmount?: null
    ): RedeemEventFilter;
    Redeem(
      sender?: null,
      treasuryAsset?: null,
      redeemAmount?: null,
      assetAmount?: null
    ): RedeemEventFilter;

    "Seed(address,uint256,uint256)"(
      sender?: null,
      tokensSeeded?: null,
      reserveReceived?: null
    ): SeedEventFilter;
    Seed(
      sender?: null,
      tokensSeeded?: null,
      reserveReceived?: null
    ): SeedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "TreasuryAsset(address,address)"(
      sender?: null,
      asset?: null
    ): TreasuryAssetEventFilter;
    TreasuryAsset(sender?: null, asset?: null): TreasuryAssetEventFilter;

    "Unseed(address,uint256,uint256)"(
      sender?: null,
      tokensUnseeded?: null,
      reserveReturned?: null
    ): UnseedEventFilter;
    Unseed(
      sender?: null,
      tokensUnseeded?: null,
      reserveReturned?: null
    ): UnseedEventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockNumberForPhase(
      phaseBlocks_: BigNumberish[],
      phase_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    highwater(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      config_: SeedERC20ConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    newTreasuryAsset(
      newTreasuryAsset_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    phaseAtBlockNumber(
      phaseBlocks_: BigNumberish[],
      blockNumber_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phaseBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pullERC20(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      units_: BigNumberish,
      safetyRelease_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seed(
      minimumUnits_: BigNumberish,
      desiredUnits_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unseed(
      units_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockNumberForPhase(
      phaseBlocks_: BigNumberish[],
      phase_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    highwater(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      config_: SeedERC20ConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newTreasuryAsset(
      newTreasuryAsset_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    phaseAtBlockNumber(
      phaseBlocks_: BigNumberish[],
      blockNumber_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phaseBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pullERC20(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      units_: BigNumberish,
      safetyRelease_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seed(
      minimumUnits_: BigNumberish,
      desiredUnits_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unseed(
      units_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
