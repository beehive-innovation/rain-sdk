{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.22.2",
    "schemaVersion": 1005,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "rain-sdk!",
  "docComment": "",
  "name": "rain-sdk",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "rain-sdk!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!AddressBook:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AddressBook "
            }
          ],
          "releaseTag": "Public",
          "name": "AddressBook",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!AddressBook.getAddressesForChainId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getAddressesForChainId: "
                },
                {
                  "kind": "Content",
                  "text": "(chainId: number) => "
                },
                {
                  "kind": "Reference",
                  "text": "Addresses",
                  "canonicalReference": "rain-sdk!Addresses:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getAddressesForChainId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": true
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "rain-sdk!Addresses:type",
          "docComment": "/**\n * Type for all the addresses stored in the Book\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Addresses = "
            },
            {
              "kind": "Content",
              "text": "{\n    redeemableERC20Factory: string;\n    verifyFactory: string;\n    verifyTierFactory: string;\n    erc20BalanceTierFactory: string;\n    erc20TransferTierFactory: string;\n    combineTierFactory: string;\n    erc721BalanceTierFactory: string;\n    gatedNFTFactory: string;\n    redeemableERC20ClaimEscrow: string;\n    noticeBoard: string;\n    emissionsERC20Factory: string;\n    saleFactory: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Addresses",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!BuyConfig:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BuyConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "BuyConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!BuyConfig#desiredUnits:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "desiredUnits: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "desiredUnits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!BuyConfig#fee:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fee: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fee",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!BuyConfig#feeRecipient:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "feeRecipient: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "feeRecipient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!BuyConfig#maximumPrice:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maximumPrice: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maximumPrice",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!BuyConfig#minimumUnits:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumUnits: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minimumUnits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "rain-sdk!bytify:function(1)",
          "docComment": "/**\n * Converts a value to raw bytes representation. Assumes `value` is less than or equal to 1 byte, unless a desired `bytesLength` is specified.\n *\n * @param value - value to convert to raw bytes format\n *\n * @param bytesLength - (defaults to 1) number of bytes to left pad if `value` doesn't completely fill the desired amount of memory. Will throw `InvalidArgument` error if value already exceeds bytes length.\n *\n * @returns raw bytes representation as Uint8Array\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function bytify(value: "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Hexable",
              "canonicalReference": "@ethersproject/bytes!Hexable:interface"
            },
            {
              "kind": "Content",
              "text": ", bytesLength?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "bytesLength",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "bytify"
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!CombineTier:class",
          "docComment": "/**\n * A class for deploying and calling methods on a CombineTier.\n *\n * Implements `ReadOnlyTier` over RainVM. Allows combining the reports from any other `ITier` contracts referenced in the `ImmutableSource` set at construction. value at the top of the stack after executing the rain script will be used as the return of `report`.\n *\n * @remarks\n *\n * This class provides an easy way to deploy CombineTiers using Rain's canonical factories, and methods for interacting with an already deployed CombineTier.\n *\n * @example\n * ```typescript\n * import { CombineTier } from 'rain-sdk'\n *\n * // To deploy a new CombineTier, pass an ethers.js Signer and the config for the CombineTier.\n * const newTier = await CombineTier.deploy(signer, CombineTierConfigArgs)\n *\n * // To connect to an existing CombineTier just pass the address and an ethers.js Signer.\n * const existingTier = new CombineTier(address, signer)\n *\n * // Once you have a CombineTier, you can call the smart contract methods:\n * const report = await existingTier.report(address)\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CombineTier extends "
            },
            {
              "kind": "Reference",
              "text": "TierFactoryContract",
              "canonicalReference": "rain-sdk!TierFactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CombineTier",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!CombineTier.deploy:member",
              "docComment": "/**\n * Deploys a new CombineTier.\n *\n * @param signer - An ethers.js Signer\n *\n * @param args - Arguments for deploying a CombineTier\n *\n * @param overrides - \n *\n * @returns A new CombineTier instance\n *\n * @see\n *\n * CombineTierDeployArgs\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "CombineTierDeployArgs",
                  "canonicalReference": "rain-sdk!CombineTierDeployArgs:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CombineTier",
                  "canonicalReference": "rain-sdk!CombineTier:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!CombineTier.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this CombineTierFactory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!CombineTier.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"combineTierFactory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!CombineTier#setTier:member",
              "docComment": "/**\n * It is NOT implemented in CombineTiers. Always will throw an error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setTier: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, endTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "rain-sdk!CombineTierDeployArgs:type",
          "docComment": "/**\n * The StateConfig will be deployed as a pointer under\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CombineTierDeployArgs = "
            },
            {
              "kind": "Reference",
              "text": "State",
              "canonicalReference": "rain-sdk!State:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CombineTierDeployArgs",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!EmissionsERC20:class",
          "docComment": "/**\n * A class for calling methods on a EmissionsERC20.\n *\n * @remarks\n *\n * This class provides an easy way to deploy and interact with EmissionsERC20's.\n *\n * @example\n * ```typescript\n * import { EmissionsERC20 } from 'rain-sdk';\n *\n * // To deploy a new EmissionsERC20, pass an ethers.js Signer and the config for the EmissionsERC20.\n * const newEmission = EmissionsERC20.deploy(signer, args);\n *\n * // Check if an address is child from the factory deployed in the current chain.\n * await EmissionsERC20.isChild(signer, newEmission.address);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EmissionsERC20 extends "
            },
            {
              "kind": "Reference",
              "text": "TierFactoryContract",
              "canonicalReference": "rain-sdk!TierFactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EmissionsERC20",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!EmissionsERC20:constructor(1)",
              "docComment": "/**\n * Constructs a new EmissionsERC20 from a known address.\n *\n * @param address - The address of the EmissionsERC20 contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new EmissionsERC20 instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#allowance:member",
              "docComment": "/**\n * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom()`. This is zero by default.\n *\n * This value changes when `approve()` or `transferFrom()` are called.\n *\n * @param owner - The owner of the tokens\n *\n * @param spender - The address to check how much amount have allow to use\n *\n * @param overrides - \n *\n * @returns Amount of tokens allow to expend\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly allowance: "
                },
                {
                  "kind": "Content",
                  "text": "(owner: string, spender: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "allowance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#allowDelegatedClaims:member",
              "docComment": "/**\n * Whether the claimant must be the caller of `claim`. If `false` then accounts other than claimant can claim. This may or may not be desirable depending on the emissions schedule. For example, a linear schedule will produce the same end result for the claimant regardless of who calls `claim` or when but an exponential schedule is more profitable if the claimant waits longer between claims. In the non-linear case delegated claims would be inappropriate as third party accounts could grief claimants by claiming \"early\", thus forcing opportunity cost on claimants who would have preferred to wait.\n *\n * @param overrides - \n *\n * @returns A boolean as true if deledated claims is allowed\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly allowDelegatedClaims: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "allowDelegatedClaims",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#approve:member",
              "docComment": "/**\n * Sets `amount` as the allowance of `spender` over the caller's tokens.\n *\n * Returns a boolean value indicating whether the operation succeeded.\n *\n * @param spender - The addess that will get approved\n *\n * @param amount - The amount that `spender` is allowed to spend\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly approve: "
                },
                {
                  "kind": "Content",
                  "text": "(spender: string, amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "approve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#balanceOf:member",
              "docComment": "/**\n * Returns the amount of tokens owned by `account`.\n *\n * @param account - Account address to get the balance\n *\n * @param overrides - \n *\n * @returns Amount of tokens that the owner have\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly balanceOf: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "balanceOf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#calculateClaim:member",
              "docComment": "/**\n * Calculates the claim without processing it. Read only method that may be useful downstream both onchain and offchain if a claimant wants to check the claim amount before deciding whether to process it. As this is read only there are no checks against delegated claims. It is possible to return a value from `calculateClaim` and to not be able to process the claim with `claim` if `msg.sender` is not the `claimant`.\n *\n * @param claimant - - Address to calculate current claim for.\n *\n * @param overrides - -\n *\n * @returns the claim calculated\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly calculateClaim: "
                },
                {
                  "kind": "Content",
                  "text": "(claimant: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "calculateClaim",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#claim:member",
              "docComment": "/**\n * Processes the claim for `claimant_`. - Enforces `allowDelegatedClaims` if it is `true` so that `msg.sender` must also be `claimant_`. - Takes the return from `calculateClaim` and mints for `claimant_`. - Records the current block as the claim-tier for this contract. - emits a `Claim` event as per `IClaim`.\n *\n * @param claimant - address receiving minted tokens. MUST be `msg.sender` if `allowDelegatedClaims` is `false`.\n *\n * @param data - NOT used onchain. Forwarded to `Claim` event for potential additional offchain processing.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly claim: "
                },
                {
                  "kind": "Content",
                  "text": "(claimant: string, data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "claim",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#decimals:member",
              "docComment": "/**\n * Returns the number of decimals used to get its user representation.\n *\n * @param overrides - \n *\n * @returns The decimals of the Emissions contract\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly decimals: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "decimals",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#decreaseAllowance:member",
              "docComment": "/**\n * Atomically decreases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to `approve()` that can be used as a mitigation for problems described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729.\n *\n * @param spender - address to decrease the allowance\n *\n * @param subtractedValue - amount to decrease\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly decreaseAllowance: "
                },
                {
                  "kind": "Content",
                  "text": "(spender: string, subtractedValue: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "decreaseAllowance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20.deploy:member",
              "docComment": "/**\n * Deploys a new EmissionsERC20.\n *\n * @param signer - An ethers.js Signer\n *\n * @param args - Arguments for deploying a EmissionsERC20\n *\n * @param overrides - \n *\n * @returns A new EmissionsERC20 instance\n *\n * @see\n *\n * EmissionsERC20DeployArgs\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "EmissionsERC20DeployArgs",
                  "canonicalReference": "rain-sdk!EmissionsERC20DeployArgs:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EmissionsERC20",
                  "canonicalReference": "rain-sdk!EmissionsERC20:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#increaseAllowance:member",
              "docComment": "/**\n * Atomically increases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to `approve()` that can be used as a mitigation for problems described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729.\n *\n * @param spender - address to increase the allowance\n *\n * @param addedValue - amount to increase\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly increaseAllowance: "
                },
                {
                  "kind": "Content",
                  "text": "(spender: string, addedValue: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "increaseAllowance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this RedeemableERC20Factory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#name:member",
              "docComment": "/**\n * Returns the name of the token.\n *\n * @param overrides - \n *\n * @returns The name of the Emissions contract\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"emissionsERC20Factory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#setTier:member",
              "docComment": "/**\n * It is NOT implemented in Emissions. Always will throw an error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setTier: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, endTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#symbol:member",
              "docComment": "/**\n * Returns the symbol of the token, usually a shorter version of the name.\n *\n * @param overrides - \n *\n * @returns The symbol of the Emissions contract\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly symbol: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "symbol",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#totalSupply:member",
              "docComment": "/**\n * Returns the amount of tokens in existence.\n *\n * @param overrides - \n *\n * @returns The total supply that have the Emissions\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly totalSupply: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "totalSupply",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#transfer:member",
              "docComment": "/**\n * Moves `amount` tokens from the caller's account to `to`.\n *\n * Requirements:\n *\n * - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\n *\n * @param to - address that will receive the tokens\n *\n * @param amount - token amount to transfer\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly transfer: "
                },
                {
                  "kind": "Content",
                  "text": "(to: string, amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transfer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!EmissionsERC20#transferFrom:member",
              "docComment": "/**\n * Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance.\n *\n * NOTE: Does not update the allowance if the current allowance is the maximum `uint256`.\n *\n * Requirements:\n *\n * - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for `from`'s tokens of at least `amount`.\n *\n * @param from - address that have the tokens to transfer\n *\n * @param to - address that will receive the tokens\n *\n * @param amount - token amount to transfer\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly transferFrom: "
                },
                {
                  "kind": "Content",
                  "text": "(from: string, to: string, amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transferFrom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!EmissionsERC20DeployArgs:interface",
          "docComment": "/**\n * Everything required by the `EmissionsERC20` constructor.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EmissionsERC20DeployArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "EmissionsERC20DeployArgs",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!EmissionsERC20DeployArgs#allowDelegatedClaims:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowDelegatedClaims: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "allowDelegatedClaims",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!EmissionsERC20DeployArgs#erc20Config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "erc20Config: "
                },
                {
                  "kind": "Reference",
                  "text": "ERC20Config",
                  "canonicalReference": "rain-sdk!ERC20Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "erc20Config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!EmissionsERC20DeployArgs#vmStateConfig:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vmStateConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "State",
                  "canonicalReference": "rain-sdk!State:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "vmStateConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!ERC20BalanceTier:class",
          "docComment": "/**\n * A class for deploying and calling methods on a ERC20BalanceTier.\n *\n * The `ERC20BalanceTier` simply checks the current balance of an erc20 against tier values. As the current balance is always read from the erc20 contract directly there is no historical block data.\n *\n * @remarks\n *\n * This class provides an easy way to deploy ERC20BalanceTiers using Rain's canonical factories, and methods for interacting with an already deployed ERC20BalanceTier.\n *\n * @example\n * ```typescript\n * import { ERC20BalanceTier } from 'rain-sdk'\n *\n * // To deploy a new ERC20BalanceTier, pass an ethers.js Signer and the config for the ERC20BalanceTier.\n * const newTier = await ERC20BalanceTier.deploy(signer, ERC20BalanceTierArgs);\n *\n * // To connect to an existing ERC20BalanceTier just pass the address and an ethers.js Signer.\n * const existingTier = new ERC20BalanceTier(address, signer);\n *\n * // Once you have a ERC20BalanceTier, you can call the smart contract methods:\n * const tierValues = await existingTier.tierValues();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ERC20BalanceTier extends "
            },
            {
              "kind": "Reference",
              "text": "TierFactoryContract",
              "canonicalReference": "rain-sdk!TierFactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ERC20BalanceTier",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!ERC20BalanceTier:constructor(1)",
              "docComment": "/**\n * Constructs a new ERC20BalanceTier from a known address.\n *\n * @param address - The address of the ERC20BalanceTier contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new ERC20BalanceTier instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20BalanceTier.deploy:member",
              "docComment": "/**\n * Deploys a new ERC20BalanceTier.\n *\n * @param signer - An ethers.js Signer\n *\n * @param args - Arguments for deploying a ERC20BalanceTier\n *\n * @param overrides - \n *\n * @returns A new ERC20BalanceTier instance\n *\n * @see\n *\n * ERC20BalanceTierDeployArgs\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "ERC20BalanceTierDeployArgs",
                  "canonicalReference": "rain-sdk!ERC20BalanceTierDeployArgs:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ERC20BalanceTier",
                  "canonicalReference": "rain-sdk!ERC20BalanceTier:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20BalanceTier.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this ERC20BalanceTierFactory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20BalanceTier.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"erc20BalanceTierFactory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20BalanceTier#setTier:member",
              "docComment": "/**\n * It is NOT implemented in BalanceTiers. Always will throw an error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setTier: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, endTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20BalanceTier#tierValues:member",
              "docComment": "/**\n * Complements the default solidity accessor for `tierValues`. Returns all the values in a listrather than requiring an index be specified.\n *\n * @param overrides - \n *\n * @returns The immutable `tierValues[8]`.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tierValues: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tierValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!ERC20BalanceTierDeployArgs:interface",
          "docComment": "/**\n * Constructor config for ERC20BalanceTier\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ERC20BalanceTierDeployArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "ERC20BalanceTierDeployArgs",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC20BalanceTierDeployArgs#erc20:member",
              "docComment": "/**\n * The erc20 token contract to check the balance of at `report` time\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "erc20: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "erc20",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC20BalanceTierDeployArgs#tierValues:member",
              "docComment": "/**\n * 8 values corresponding to minimum erc20 balances for tier 1 through tier 8\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tierValues: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tierValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!ERC20Config:interface",
          "docComment": "/**\n * Constructor config for standard Open Zeppelin ERC20.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ERC20Config "
            }
          ],
          "releaseTag": "Public",
          "name": "ERC20Config",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC20Config#distributor:member",
              "docComment": "/**\n * Distributor address of the initial supply. MAY be zero.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distributor: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "distributor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC20Config#initialSupply:member",
              "docComment": "/**\n * Initial supply to mint.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initialSupply: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "initialSupply",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC20Config#name:member",
              "docComment": "/**\n * Name as defined by Open Zeppelin ERC20.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC20Config#symbol:member",
              "docComment": "/**\n * Symbol as defined by Open Zeppelin ERC20.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "symbol: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "symbol",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!ERC20TransferTier:class",
          "docComment": "/**\n * A class for deploying and calling methods on a ERC20TransferTier.\n *\n * The `ERC20TransferTier` takes ownership of an erc20 balance by transferring erc20 token to itself. The `msg.sender` must pay the difference on upgrade; the tiered address receives refunds on downgrade. This allows users to \"gift\" tiers to each other. As the transfer is a state changing event we can track historical block times.\n *\n * As the tiered address moves up/down tiers it sends/receives the value difference between its current tier only.The user is required to preapprove enough erc20 to cover the tier change or they will fail and lose gas.\n *\n * In addition to the standard accounting it requires that users transfer erc20 tokens to achieve a tier. Data is ignored, the only requirement is that the user has approved sufficient balance to gain the next tier. The 8 values for gainable tiers and erc20 contract must be set upon construction and are immutable.\n *\n * `⚠️ WARNING:` If a user sends erc20 tokens directly to the contract without calling `setTier` the FUNDS ARE LOST. ⚠️\n *\n * @remarks\n *\n * This class provides an easy way to deploy ERC20TransferTiers using Rain's canonical factories, and methods for interacting with an already deployed ERC20TransferTier.\n *\n * @example\n * ```typescript\n * import { ERC20TransferTier } from 'rain-sdk'\n *\n * // To deploy a new ERC20TransferTier, pass an ethers.js Signer and the config for the ERC20TransferTier.\n * const newTier = await ERC20TransferTier.deploy(signer, ERC20TransferTierConfigArgs);\n *\n * // To connect to an existing ERC20TransferTier just pass the address and an ethers.js Signer.\n * const existingTier = new ERC20TransferTier(address, signer);\n *\n * // Once you have a ERC20TransferTier, you can call the smart contract methods:\n * const tierValues = await existingTier.tierValues();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ERC20TransferTier extends "
            },
            {
              "kind": "Reference",
              "text": "TierFactoryContract",
              "canonicalReference": "rain-sdk!TierFactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ERC20TransferTier",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!ERC20TransferTier:constructor(1)",
              "docComment": "/**\n * Constructs a new ERC20TransferTier from a known address.\n *\n * @param address - The address of the ERC20TransferTier contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new ERC20TransferTier instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20TransferTier.deploy:member",
              "docComment": "/**\n * Deploys a new ERC20TransferTier.\n *\n * @param signer - An ethers.js Signer\n *\n * @param args - Arguments for deploying a ERC20TransferTier\n *\n * @param overrides - \n *\n * @returns A new ERC20TransferTier instance\n *\n * @see\n *\n * ERC20TransferTierDeployArgs\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "ERC20TransferTierDeployArgs",
                  "canonicalReference": "rain-sdk!ERC20TransferTierDeployArgs:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ERC20TransferTier",
                  "canonicalReference": "rain-sdk!ERC20TransferTier:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20TransferTier.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this ERC20TransferTierFactory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20TransferTier.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"erc20TransferTierFactory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20TransferTier#setTier:member",
              "docComment": "/**\n * Users can set their own tier by calling `setTier`. Updates the tier of an account. Transfers balances of erc20 from/to the tiered account according to the difference in values.\n *\n * Any failure to transfer in/out will rollback the tier change. The tiered account must ensure sufficient approvals before attempting to set a new tier. This throw an error if the user attempts to return to the ZERO tier.\n *\n * @param account - Account to change the tier for.\n *\n * @param endTier - Tier after the change.\n *\n * @param data - Arbitrary input to disambiguate ownership\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setTier: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, endTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC20TransferTier#tierValues:member",
              "docComment": "/**\n * Complements the default solidity accessor for `tierValues`. Returns all the values in a listrather than requiring an index be specified.\n *\n * @param overrides - \n *\n * @returns The immutable `tierValues[8]`.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tierValues: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tierValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!ERC20TransferTierDeployArgs:interface",
          "docComment": "/**\n * Constructor config for ERC20TransferTier\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ERC20TransferTierDeployArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "ERC20TransferTierDeployArgs",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC20TransferTierDeployArgs#erc20:member",
              "docComment": "/**\n * The erc20 token contract to transfer balances from/to during `setTier`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "erc20: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "erc20",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC20TransferTierDeployArgs#tierValues:member",
              "docComment": "/**\n * 8 values corresponding to minimum erc20 balances for tiers ONE through EIGHT\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tierValues: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tierValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!ERC721BalanceTier:class",
          "docComment": "/**\n * A class for deploying and calling methods on a ERC721BalanceTier. The `ERC721BalanceTier` simply checks the current balance of an erc721 against tier values. As the current balance is always read from the erc721contract directly there is no historical block data.\n *\n * @remarks\n *\n * This class provides an easy way to deploy ERC721BalanceTiers using Rain's canonical factories, and methods for interacting with an already deployed ERC721BalanceTier.\n *\n * @example\n * ```typescript\n * import { ERC721BalanceTier } from 'rain-sdk'\n *\n * // To deploy a new ERC721BalanceTier, pass an ethers.js Signer and the config for the ERC721BalanceTier.\n * const newTier = await ERC721BalanceTier.deploy(signer, ERC721BalanceTierConfigArgs);\n *\n * // To connect to an existing ERC721BalanceTier just pass the address and an ethers.js Signer.\n * const existingTier = new ERC721BalanceTier(address, signer);\n *\n * // Once you have a ERC721BalanceTier, you can call the smart contract methods:\n * const tierValues = await existingTier.tierValues();\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ERC721BalanceTier extends "
            },
            {
              "kind": "Reference",
              "text": "TierFactoryContract",
              "canonicalReference": "rain-sdk!TierFactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ERC721BalanceTier",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!ERC721BalanceTier:constructor(1)",
              "docComment": "/**\n * Constructs a new ERC721BalanceTier from a known address.\n *\n * @param address - The address of the ERC721BalanceTier contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new ERC721BalanceTier instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC721BalanceTier.deploy:member",
              "docComment": "/**\n * Deploys a new ERC721BalanceTier.\n *\n * @param signer - An ethers.js Signer\n *\n * @param args - Arguments for deploying a ERC721BalanceTier\n *\n * @param overrides - \n *\n * @returns A new ERC721BalanceTier instance\n *\n * @see\n *\n * ERC721BalanceTierDeployArgs\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "ERC721BalanceTierDeployArgs",
                  "canonicalReference": "rain-sdk!ERC721BalanceTierDeployArgs:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ERC721BalanceTier",
                  "canonicalReference": "rain-sdk!ERC721BalanceTier:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC721BalanceTier.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this ERC721BalanceTierFactory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC721BalanceTier.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"erc721BalanceTierFactory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC721BalanceTier#setTier:member",
              "docComment": "/**\n * It is NOT implemented in BalanceTiers. Always will throw an error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setTier: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, endTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!ERC721BalanceTier#tierValues:member",
              "docComment": "/**\n * Complements the default solidity accessor for `tierValues`. Returns all the values in a listrather than requiring an index be specified.\n *\n * @param overrides - \n *\n * @returns The immutable `tierValues[8]`.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tierValues: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tierValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!ERC721BalanceTierDeployArgs:interface",
          "docComment": "/**\n * Constructor config for ERC721BalanceTier\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ERC721BalanceTierDeployArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "ERC721BalanceTierDeployArgs",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC721BalanceTierDeployArgs#erc721:member",
              "docComment": "/**\n * The erc721 token contract to check the balance of at `report` time\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "erc721: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "erc721",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!ERC721BalanceTierDeployArgs#tierValues:member",
              "docComment": "/**\n * 8 values corresponding to minimum erc721 balances for tier 1 through tier 8\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tierValues: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tierValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!Evidence:interface",
          "docComment": "/**\n * Structure of arbitrary evidence to support any action taken. Priviledged roles are expected to provide evidence just as applicants as an audit trail will be preserved permanently in the logs.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Evidence "
            }
          ],
          "releaseTag": "Public",
          "name": "Evidence",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!Evidence#account:member",
              "docComment": "/**\n * The account this evidence is relevant to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "account: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "account",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!Evidence#data:member",
              "docComment": "/**\n * Arbitrary bytes representing evidence. MAY be e.g. a reference to a sufficiently decentralised external system such as an IPFS hash.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!FactoryContract:class",
          "docComment": "/**\n * All contract factory should use this instead of directly Rain contract to take advantage of specific method to factories\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class FactoryContract extends "
            },
            {
              "kind": "Reference",
              "text": "RainContract",
              "canonicalReference": "rain-sdk!RainContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FactoryContract",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "rain-sdk!FactoryContract._isChild:member(1)",
              "docComment": "/**\n * Checks if address is registered as a child contract of the factory in the chain. Should be implemented in sub-classes that repreent factories to expose it.\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static _isChild(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "maybeChild",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "_isChild"
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!FactoryContract.getNewChildFromReceipt:member",
              "docComment": "/**\n * Get the child from a receipt obtain from a Factory transaction\n *\n * @param receipt - The receipt of the transaction\n *\n * @param parentContract - Contract factory/parent that create the child. Can be the instance or the address\n *\n * @returns The address of the child\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly getNewChildFromReceipt: "
                },
                {
                  "kind": "Content",
                  "text": "(receipt: "
                },
                {
                  "kind": "Reference",
                  "text": "ContractReceipt",
                  "canonicalReference": "@ethersproject/contracts!ContractReceipt:interface"
                },
                {
                  "kind": "Content",
                  "text": ", parentContract: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract",
                  "canonicalReference": "@ethersproject/contracts!Contract:class"
                },
                {
                  "kind": "Content",
                  "text": " | string) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getNewChildFromReceipt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!GatedConfig:interface",
          "docComment": "/**\n * Configuration of the basic information that will be added to the ERC721 NFT\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GatedConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "GatedConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedConfig#animationHash:member",
              "docComment": "/**\n * The hash of the NFT animation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animationHash: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "animationHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedConfig#animationUrl:member",
              "docComment": "/**\n * An animation url of the NFT\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animationUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "animationUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedConfig#description:member",
              "docComment": "/**\n * Description that will contain the GatedNFT\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedConfig#imageHash:member",
              "docComment": "/**\n * The hash of the NFT image\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageHash: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "imageHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedConfig#imageUrl:member",
              "docComment": "/**\n * An image url of the NFT\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "imageUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedConfig#name:member",
              "docComment": "/**\n * Name of the token as defined by Open Zeppelin ERC721\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedConfig#symbol:member",
              "docComment": "/**\n * Symbol of the token as defined by Open Zeppelin ERC721\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "symbol: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "symbol",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!GatedNFT:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class GatedNFT extends "
            },
            {
              "kind": "Reference",
              "text": "FactoryContract",
              "canonicalReference": "rain-sdk!FactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "GatedNFT",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!GatedNFT:constructor(1)",
              "docComment": "/**\n * Constructs a new GatedNFT from a known address.\n *\n * @param address - The address of the GatedNFT contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new GatedNFT instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#approve:member",
              "docComment": "/**\n * Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred.\n *\n * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n *\n * Requirements:\n *\n * - The caller must own the token or be an approved operator. - `tokenId` must exist.\n *\n * @param to - account address that will be approved\n *\n * @param tokenId - ID of the token that will be approve to use\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly approve: "
                },
                {
                  "kind": "Content",
                  "text": "(to: string, tokenId: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "approve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#balanceOf:member",
              "docComment": "/**\n * Returns the number of tokens in `owner`'s account.\n *\n * @param owner - owner address to get the balance\n *\n * @param overrides - \n *\n * @returns Amount of tokens that the owner have\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly balanceOf: "
                },
                {
                  "kind": "Content",
                  "text": "(owner: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "balanceOf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT.deploy:member",
              "docComment": "/**\n * Deploys a new GatedNFT.\n *\n * @param signer - An ethers.js Signer\n *\n * @param args - Arguments for deploying a GatedNFT\n *\n * @param overrides - \n *\n * @returns A new GatedNFT instance\n *\n * @see\n *\n * GatedNFTDeployArguments\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "GatedNFTDeployArguments",
                  "canonicalReference": "rain-sdk!GatedNFTDeployArguments:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GatedNFT",
                  "canonicalReference": "rain-sdk!GatedNFT:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#getApproved:member",
              "docComment": "/**\n * Returns the account approved for `tokenId` token.\n *\n * Requirements:\n *\n * - `tokenId` must exist.\n *\n * @param tokenId - ID of the token to get what address is approved to use it\n *\n * @param overrides - \n *\n * @returns The address that is approve to use the token\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly getApproved: "
                },
                {
                  "kind": "Content",
                  "text": "(tokenId: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getApproved",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#isApprovedForAll:member",
              "docComment": "/**\n * Returns if the `operator` is allowed to manage all of the assets of `owner`.\n *\n * @param owner - address that hold the tokens\n *\n * @param operator - address to check if it is approved to use all the tokens of the owner\n *\n * @param overrides - \n *\n * @returns true if operator has approved for all\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly isApprovedForAll: "
                },
                {
                  "kind": "Content",
                  "text": "(owner: string, operator: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isApprovedForAll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this GatedNFTFactory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#mint:member",
              "docComment": "/**\n * Mint a token and transfers it to `to`.\n *\n * Requirements: - `to` should have the required tier - `to` should not exhausted his allowance\n *\n * @param to - The address that will get the token minted\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly mint: "
                },
                {
                  "kind": "Content",
                  "text": "(to: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "mint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#name:member",
              "docComment": "/**\n * Returns the token collection name.\n *\n * @param overrides - \n *\n * @returns The name of the GatedNFT\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"gatedNFTFactory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#owner:member",
              "docComment": "/**\n * Returns the address of the current owner.\n *\n * @param overrides - \n *\n * @returns current owner address of the contract\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly owner: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "owner",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#ownerOf:member",
              "docComment": "/**\n * Returns the owner of the `tokenId` token.\n *\n * Requirements:\n *\n * - `tokenId` must exist.\n *\n * @param tokenId - ID of tokens to get the owner\n *\n * @param overrides - \n *\n * @returns the owner address of the token\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ownerOf: "
                },
                {
                  "kind": "Content",
                  "text": "(tokenId: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ownerOf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#renounceOwnership:member",
              "docComment": "/**\n * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.\n *\n * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly renounceOwnership: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "renounceOwnership",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#royaltyInfo:member",
              "docComment": "/**\n * Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n *\n * @param salePrice - the sale price that will be use as based to calculate hor much royalty is owed\n *\n * @param overrides - \n *\n * @returns The royaltyRecipient and the royaltyAmount\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly royaltyInfo: "
                },
                {
                  "kind": "Content",
                  "text": "(salePrice: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RoyaltyInfo",
                  "canonicalReference": "rain-sdk!RoyaltyInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "royaltyInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#safeTransferFrom:member",
              "docComment": "/**\n * Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.\n *\n * Requirements:\n *\n * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either approve() or setApprovalForAll(). - If `to` refers to a smart contract, it must implement `IERC721Receiver-onERC721Received`, which is called upon a safe transfer.\n *\n * @param from - address that have the token to transfer\n *\n * @param to - address that will receive the token\n *\n * @param tokenId - ID of token that will be transfer\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly safeTransferFrom: "
                },
                {
                  "kind": "Content",
                  "text": "(from: string, to: string, tokenId: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "safeTransferFrom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#safeTransferFromWithData:member",
              "docComment": "/**\n * Safely transfers `tokenId` token from `from` to `to`.\n *\n * Requirements:\n *\n * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either approve() or setApprovalForAll(). - If `to` refers to a smart contract, it must implement `IERC721Receiver-onERC721Received`, which is called upon a safe transfer.\n *\n * @param from - address that have the token to transfer\n *\n * @param to - address that will receive the token\n *\n * @param tokenId - ID of token that will be transfer\n *\n * @param data - extra data for onERC721Received\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly safeTransferFromWithData: "
                },
                {
                  "kind": "Content",
                  "text": "(from: string, to: string, tokenId: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "safeTransferFromWithData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#setApprovalForAll:member",
              "docComment": "/**\n * Approve or remove `operator` as an operator for the caller. Operators can call `transferFrom()` or `safeTransferFrom()` for any token owned by the caller.\n *\n * Requirements:\n *\n * - The `operator` cannot be the caller.\n *\n * @param operator - address to approve/denied use all the token of the caller\n *\n * @param approved - boolean to specify if operator is allowed to use the token\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setApprovalForAll: "
                },
                {
                  "kind": "Content",
                  "text": "(operator: string, approved: boolean, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setApprovalForAll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#supportsInterface:member",
              "docComment": "/**\n * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created.\n *\n * @param interfaceId - interfaceId that will be checked if it is supported\n *\n * @param overrides - \n *\n * @returns true if the contract support the inerfaceId\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly supportsInterface: "
                },
                {
                  "kind": "Content",
                  "text": "(interfaceId: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "supportsInterface",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#symbol:member",
              "docComment": "/**\n * Returns the token collection symbol.\n *\n * @param overrides - \n *\n * @returns The symbol of the GatedNFT\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly symbol: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "symbol",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#tier:member",
              "docComment": "/**\n * Tier contract to compare statuses against on transfer.\n *\n * @param overrides - \n *\n * @returns The tier contract address\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tier: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#tokenURI:member",
              "docComment": "/**\n * Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n *\n * @param tokenId - `tokenId` must exist.\n *\n * @param overrides - \n *\n * @returns The token URI\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tokenURI: "
                },
                {
                  "kind": "Content",
                  "text": "(tokenId: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tokenURI",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#totalSupply:member",
              "docComment": "/**\n * Returns the total amount of tokens stored by the contract.\n *\n * @param overrides - \n *\n * @returns the amount of tokens minted\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly totalSupply: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "totalSupply",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#transferFrom:member",
              "docComment": "/**\n * Transfers `tokenId` token from `from` to `to`.\n *\n * WARNING: Usage of this method is discouraged, use `safeTransferFrom()` whenever possible.\n *\n * Requirements:\n *\n * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either `approve()` or `setApprovalForAll()`.\n *\n * @param from - address that have the token to transfer\n *\n * @param to - address that will receive the token\n *\n * @param tokenId - ID of token that will be transfer\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly transferFrom: "
                },
                {
                  "kind": "Content",
                  "text": "(from: string, to: string, tokenId: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transferFrom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#transferOwnership:member",
              "docComment": "/**\n * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\n *\n * @param newOwner - address of the new owner\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly transferOwnership: "
                },
                {
                  "kind": "Content",
                  "text": "(newOwner: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transferOwnership",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!GatedNFT#updateRoyaltyRecipient:member",
              "docComment": "/**\n * Update the royalty recipient. Requires the caller to be the current recipient\n *\n * @param royaltyRecipient - The new recipient. Cannot be a zero address\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly updateRoyaltyRecipient: "
                },
                {
                  "kind": "Content",
                  "text": "(royaltyRecipient: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "updateRoyaltyRecipient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!GatedNFTDeployArguments:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GatedNFTDeployArguments "
            }
          ],
          "releaseTag": "Public",
          "name": "GatedNFTDeployArguments",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedNFTDeployArguments#config:member",
              "docComment": "/**\n * Configuration of the basic information that will be added to the ERC721 NFT\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "config: "
                },
                {
                  "kind": "Reference",
                  "text": "GatedConfig",
                  "canonicalReference": "rain-sdk!GatedConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedNFTDeployArguments#maxMintable:member",
              "docComment": "/**\n * Maximun of tokens that will be mint in the contract\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxMintable: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxMintable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedNFTDeployArguments#maxPerAddress:member",
              "docComment": "/**\n * Maximun of mint that is allowed per address\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxPerAddress: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxPerAddress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedNFTDeployArguments#minimumStatus:member",
              "docComment": "/**\n * Minimum tier required for mints and transfers. Can be '0'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumStatus: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minimumStatus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedNFTDeployArguments#royaltyBPS:member",
              "docComment": "/**\n * The royalty BPS\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "royaltyBPS: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "royaltyBPS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedNFTDeployArguments#royaltyRecipient:member",
              "docComment": "/**\n * The royalty recipient\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "royaltyRecipient: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "royaltyRecipient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedNFTDeployArguments#tier:member",
              "docComment": "/**\n * Tier contract to compare statuses against on any transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tier: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!GatedNFTDeployArguments#transferrable:member",
              "docComment": "/**\n * Determine the status about how the GatedNFT contract will handle the transfers\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transferrable: "
                },
                {
                  "kind": "Reference",
                  "text": "Transferrable",
                  "canonicalReference": "rain-sdk!Transferrable:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transferrable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!NoticeBoard:class",
          "docComment": "/**\n * A class for calling method on a NoticeBoard.\n *\n * @remarks\n *\n * Anyone can emit a `Notice`.\n *\n * This is open ended content related to the subject. Some examples: - Raise descriptions/promises - Reviews/comments from token holders - Simple onchain voting/signalling\n *\n * GUIs/tooling/indexers reading this data are expected to know how to interpret it in context because the `NoticeBoard` contract does not.\n *\n * @example\n * ```typescript\n * import { NoticeBoard } from 'rain-sdk'\n *\n * const notice = new NoticeBoard(address, signer);\n *\n * const noticeArg = {\n *   subject: signer.address; // Subject can be any address\n *   data: \"0x00\"; // Can be any data\n * }\n *\n * const tx = await notice.createNotices([noticeArg]);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NoticeBoard extends "
            },
            {
              "kind": "Reference",
              "text": "RainContract",
              "canonicalReference": "rain-sdk!RainContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NoticeBoard",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!NoticeBoard:constructor(1)",
              "docComment": "/**\n * Constructs a new NoticeBoard from a known address.\n *\n * @param address - The address of the NoticeBoard contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new NoticeBoard instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!NoticeBoard#createNotices:member",
              "docComment": "/**\n * Anyone can create notices about some subject. The notice is opaque bytes. The indexer/GUI is expected to understand the context to decode/interpret it. The indexer/GUI is strongly recommended to filter out untrusted content.\n *\n * @param notices - All the notices to emit.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly createNotices: "
                },
                {
                  "kind": "Content",
                  "text": "(notices: "
                },
                {
                  "kind": "Reference",
                  "text": "NoticeStruct",
                  "canonicalReference": "rain-sdk!NoticeStruct:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "createNotices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!NoticeBoard.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"noticeBoard\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!NoticeStruct:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NoticeStruct "
            }
          ],
          "releaseTag": "Public",
          "name": "NoticeStruct",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!NoticeStruct#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!NoticeStruct#subject:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subject: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subject",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "rain-sdk!op:function(1)",
          "docComment": "/**\n * Converts an opcode and operand to bytes, and returns their concatenation.\n *\n * @param code - the opcode\n *\n * @param erand - the operand, currently limited to 1 byte (defaults to 0)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function op(code: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", erand?: "
            },
            {
              "kind": "Content",
              "text": "number | "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Hexable",
              "canonicalReference": "@ethersproject/bytes!Hexable:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "code",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "erand",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "name": "op"
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!RainContract:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class RainContract "
            }
          ],
          "releaseTag": "Public",
          "name": "RainContract",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!RainContract:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `RainContract` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RainContract#address:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "address",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RainContract#connect:member",
              "docComment": "/**\n * Connect the current instance to a new signer\n *\n * @param signer - The new signer which will be connected\n *\n * @returns The instance with a new signer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly connect: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ") => this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "connect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "rain-sdk!RainContract.getBookAddress:member(1)",
              "docComment": "/**\n * Get the address stored in the book to this chain\n *\n * @param chainId - The chain ID where is deployed the contract\n *\n * @returns The address for this contract\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getBookAddress(chainId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chainId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getBookAddress"
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RainContract.getChainId:member",
              "docComment": "/**\n * Get the chain ID from a valid ethers provider.\n *\n * Request to the provider stored in the signer which is the chain ID.\n *\n * @param signerOrProvider - An ethers signer or ethers provider\n *\n * @returns The chain ID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getChainId: "
                },
                {
                  "kind": "Content",
                  "text": "(signerOrProvider: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Provider",
                  "canonicalReference": "@ethersproject/abstract-provider!Provider:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getChainId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RainContract.nameBookReference:member",
              "docComment": "/**\n * Reference to find the address in the book address. Should be implemented and assign it to each subclass\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RainContract#signer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "signer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!ReadTxOverrides:interface",
          "docComment": "/**\n * More read about `ReadTxOverrides` that comes from CallOverrides of ethers\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReadTxOverrides extends "
            },
            {
              "kind": "Reference",
              "text": "CallOverrides",
              "canonicalReference": "@ethersproject/contracts!CallOverrides:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ReadTxOverrides",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!Receipt:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Receipt "
            }
          ],
          "releaseTag": "Public",
          "name": "Receipt",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!Receipt#fee:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fee: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fee",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!Receipt#feeRecipient:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "feeRecipient: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "feeRecipient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!Receipt#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!Receipt#units:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "units: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "units",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!RedeemableERC20:class",
          "docComment": "/**\n * A class for calling methods on a RedeemableERC20.\n *\n * This is the ERC20 token that is minted and distributed.\n *\n * During `Phase.ZERO` the token can be traded and so compatible with the Balancer pool mechanics. During `Phase.ONE` the token is frozen and no longer able to be traded on any AMM or transferred directly.\n *\n * The token can be redeemed during `Phase.ONE` which burns the token in exchange for pro-rata erc20 tokens held by the `RedeemableERC20` contract itself.\n *\n * The token balances can be used indirectly for other claims, promotions and events as a proof of participation in the original distribution by token holders.\n *\n * The token can optionally be restricted by the `ITier` contract to only allow receipients with a specified membership status.\n *\n * @remarks\n *\n * This class provides an easy way to interact with RedeemableERC20's.\n *\n * @example\n * ```typescript\n * import { RedeemableERC20 } from 'rain-sdk';\n *\n * // To get a instance of an already deployed redeemable, pass the contract address and an ethers.js Signer\n * const redeemable = new RedeemableERC20(address, signer);\n *\n * // Check if an address is child from the factory deployed in the current chain.\n * await RedeemableERC20.isChild(signer, maybeChildAddress);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RedeemableERC20 extends "
            },
            {
              "kind": "Reference",
              "text": "FactoryContract",
              "canonicalReference": "rain-sdk!FactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RedeemableERC20",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!RedeemableERC20:constructor(1)",
              "docComment": "/**\n * Constructs a new RedeemableERC20 from a known address.\n *\n * @param address - The address of the RedeemableERC20 contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new RedeemableERC20 instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#allowance:member",
              "docComment": "/**\n * Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through `transferFrom()`. This is zero by default.\n *\n * This value changes when `approve()` or `transferFrom()` are called.\n *\n * @param owner - The owner of the tokens\n *\n * @param spender - The address to check how much amount have allow to use\n *\n * @param overrides - \n *\n * @returns Amount of tokens allow to expend\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly allowance: "
                },
                {
                  "kind": "Content",
                  "text": "(owner: string, spender: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "allowance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#approve:member",
              "docComment": "/**\n * Sets `amount` as the allowance of `spender` over the caller's tokens.\n *\n * Returns a boolean value indicating whether the operation succeeded.\n *\n * @param spender - The addess that will get approved\n *\n * @param amount - The amount that `spender` is allowed to spend\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly approve: "
                },
                {
                  "kind": "Content",
                  "text": "(spender: string, amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "approve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#balanceOf:member",
              "docComment": "/**\n * Returns the amount of tokens owned by `account`.\n *\n * @param account - Account address to get the balance\n *\n * @param overrides - \n *\n * @returns Amount of tokens that the owner have\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly balanceOf: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "balanceOf",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#blockNumberForPhase:member",
              "docComment": "/**\n * Pure function to reduce an array of phase blocks and phase to a specific block number. `Phase.ZERO` will always return block `0`. Every other phase will map to a block number in `phaseBlocks`.\n *\n * @param phaseBlocks - Fixed array of phase blocks to compare against.\n *\n * @param phase - Determine the relevant block number for this phase.\n *\n * @param overrides - \n *\n * @returns The block number for the phase according to `phaseBlocks_`.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly blockNumberForPhase: "
                },
                {
                  "kind": "Content",
                  "text": "(phaseBlocks: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": "[], phase: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "blockNumberForPhase",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#burn:member",
              "docComment": "/**\n * Destroys `amount` tokens from the caller, reducing the total supply. Emits a `Transfer` event with `to` set to the zero address.\n *\n * Requirements: - Caller MUST have at least `amount` tokens.\n *\n * @param amount - The amount of token to burn\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly burn: "
                },
                {
                  "kind": "Content",
                  "text": "(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "burn",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#burnFrom:member",
              "docComment": "/**\n * Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n *\n * Requirements: - The caller must have allowance for `accounts`'s tokens of at least `amount`.\n *\n * @param account - The account that hold the tokens which will be burned\n *\n * @param amount - The amount of token to burn\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly burnFrom: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "burnFrom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#currentPhase:member",
              "docComment": "/**\n * Impure read-only function to return the \"current\" phase from internal contract state. Simply wraps `phaseAtBlockNumber` for current values of `phaseBlocks` and `block.number`.\n *\n * @param overrides - \n *\n * @returns The current phase in the Redeemable\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly currentPhase: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "currentPhase",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#decimals:member",
              "docComment": "/**\n * Returns the number of decimals used to get its user representation.\n *\n * @param overrides - \n *\n * @returns The decimals of the Redeemable contract\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly decimals: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "decimals",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#decreaseAllowance:member",
              "docComment": "/**\n * Atomically decreases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to `approve()` that can be used as a mitigation for problems described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729.\n *\n * @param spender - address to decrease the allowance\n *\n * @param subtractedValue - amount to decrease\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly decreaseAllowance: "
                },
                {
                  "kind": "Content",
                  "text": "(spender: string, subtractedValue: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "decreaseAllowance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20.deploy:member",
              "docComment": "/**\n * Deploys a new RedeemableERC20.\n *\n * @param signer - An ethers.js Signer\n *\n * @param args - Arguments for deploying a RedeemableERC20\n *\n * @param overrides - \n *\n * @returns A new RedeemableERC20 instance\n *\n * @see\n *\n * RedeemableERC20DeployArgs\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "RedeemableERC20DeployArgs",
                  "canonicalReference": "rain-sdk!RedeemableERC20DeployArgs:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RedeemableERC20",
                  "canonicalReference": "rain-sdk!RedeemableERC20:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#endDistribution:member",
              "docComment": "/**\n * The admin can forward or burn all tokens of a single address to end `PHASE_DISTRIBUTING`.\n *\n * The intent is that during `PHASE_DISTRIBUTING` there is some contract responsible for distributing the tokens.\n *\n * The admin specifies the distributor to end `PHASE_DISTRIBUTING` and the forwarding address set during initialization is used. If the forwarding address is `0` the rTKN will be burned, otherwise the entire balance of the distributor is forwarded to the nominated address. In practical terms the forwarding allows for escrow depositors to receive a prorata claim on unsold rTKN if they forward it to themselves, otherwise raise participants will receive a greater share of the final escrowed tokens due to the burn reducing the total supply.\n *\n * The distributor is NOT set during the constructor because it may not exist at that point. For example, Balancer needs the paired erc20 tokens to exist before the trading pool can be built.\n *\n * @param distributor - The distributor according to the admin. BURN the tokens if `address(0)`.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly endDistribution: "
                },
                {
                  "kind": "Content",
                  "text": "(distributor: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "endDistribution",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#grantReceiver:member",
              "docComment": "/**\n * Admin can grant an address receiver rights.\n *\n * Requirements: - Caller have to be the admin\n *\n * @param newReceiver - The account to grand receiver.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly grantReceiver: "
                },
                {
                  "kind": "Content",
                  "text": "(newReceiver: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "grantReceiver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#grantSender:member",
              "docComment": "/**\n * Admin can grant an addres sender rights.\n *\n * Requirements: - Caller have to be the admin\n *\n * @param newSender - The account to grant sender.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly grantSender: "
                },
                {
                  "kind": "Content",
                  "text": "(newSender: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "grantSender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#increaseAllowance:member",
              "docComment": "/**\n * Atomically increases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to `approve()` that can be used as a mitigation for problems described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729.\n *\n * @param spender - address to increase the allowance\n *\n * @param addedValue - amount to increase\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly increaseAllowance: "
                },
                {
                  "kind": "Content",
                  "text": "(spender: string, addedValue: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "increaseAllowance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this RedeemableERC20Factory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#isReceiver:member",
              "docComment": "/**\n * Check that an address is a receiver. A sender is also a receiver.\n *\n * @param maybeReceiver - account to check.\n *\n * @param overrides - \n *\n * @returns true if account is a receiver.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly isReceiver: "
                },
                {
                  "kind": "Content",
                  "text": "(maybeReceiver: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isReceiver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#isSender:member",
              "docComment": "/**\n * Check that an address is a sender.\n *\n * @param maybeSender - account to check.\n *\n * @param overrides - \n *\n * @returns true if account is a sender.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly isSender: "
                },
                {
                  "kind": "Content",
                  "text": "(maybeSender: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isSender",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#minimumTier:member",
              "docComment": "/**\n * The minimum status that a user must hold to receive transfers during `Phase.ZERO`.\n *\n * @param overrides - \n *\n * @returns The minimum tier status in the required in the Redeemable\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly minimumTier: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minimumTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#name:member",
              "docComment": "/**\n * Returns the name of the token.\n *\n * @param overrides - \n *\n * @returns The name of the Redeemable\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"redeemableERC20Factory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#newTreasuryAsset:member",
              "docComment": "/**\n * Anon can emit a `TreasuryAsset` event to notify token holders that an asset could be redeemed by burning `RedeemableERC20` tokens.\n *\n * As this is callable by anon the events should be filtered by the indexer to those from trusted entities only.\n *\n * @param newTreasuryAsset - The asset to log.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly newTreasuryAsset: "
                },
                {
                  "kind": "Content",
                  "text": "(newTreasuryAsset: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newTreasuryAsset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#phaseAtBlockNumber:member",
              "docComment": "/**\n * Pure function to reduce an array of phase blocks and block number to a specific `Phase`.\n *\n * The phase will be the highest attained even if several phases have the same block number.\n *\n * If every phase block is after the block number then `0` is returned.\n *\n * If every phase block is before the block number then `MAX_PHASE` is returned.\n *\n * @param phaseBlocks - Fixed array of phase blocks to compare against.\n *\n * @param blockNumber - Determine the relevant phase relative to this block number.\n *\n * @param overrides - \n *\n * @returns the phase relative to the block number and phase blocks list.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly phaseAtBlockNumber: "
                },
                {
                  "kind": "Content",
                  "text": "(phaseBlocks: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": "[], blockNumber: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "phaseAtBlockNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#phaseBlocks:member",
              "docComment": "/**\n * Get a phaseBlock\n *\n * @param index - The index to get the phaseBlock. There are 8 phases. The index should be between 0 and 7.\n *\n * @param overrides - \n *\n * @returns the phase block\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly phaseBlocks: "
                },
                {
                  "kind": "Content",
                  "text": "(index: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "phaseBlocks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#redeem:member",
              "docComment": "/**\n * Burn tokens for a prorata share of the current treasury. The assets to be redeemed for must be specified as an array. This keeps the redeem functionality:\n *\n * - Gas efficient as we avoid tracking assets in storage - Decentralised as any user can deposit any asset to be redeemed - Error resistant as any individual asset reverting can be avoided by redeeming againt sans the problematic asset.\n *\n * It is also a super sharp edge if someone burns their tokens prematurely or with an incorrect asset list. Implementing contracts are strongly encouraged to implement additional safety rails to prevent high value mistakes.\n *\n * Only \"vanilla\" erc20 token balances are supported as treasury assets. I.e. if the balance is changing such as due to a rebasing token or other mechanism then the WRONG token amounts will be redeemed. The redemption calculation is very simple and naive in that it takes the current balance of this contract of the assets being claimed via redemption to calculate the \"prorata\" entitlement. If the contract's balance of the claimed token is changing between redemptions (other than due to the redemption itself) then each redemption will send incorrect amounts.\n *\n * @param treasuryAssets - The list of assets to redeem for. If this is empty or incomplete then tokens will be permanently burned for no reason by the caller and the remaining funds will be effectively redistributed to everyone else.\n *\n * @param redeemAmount - The amount of redeemable token to burn.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly redeem: "
                },
                {
                  "kind": "Content",
                  "text": "(treasuryAssets: string[], redeemAmount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redeem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#symbol:member",
              "docComment": "/**\n * Returns the symbol of the token, usually a shorter version of the name.\n *\n * @param overrides - \n *\n * @returns The symbol of the Emissions contract\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly symbol: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "symbol",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#tier:member",
              "docComment": "/**\n * Tier contract that produces the report that `minimumTier` is checked against.\n *\n * @param overrides - \n *\n * @returns The tier contract address\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tier: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#totalSupply:member",
              "docComment": "/**\n * Returns the amount of tokens in existence.\n *\n * @param overrides - \n *\n * @returns The total supply that have the Emissions\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly totalSupply: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "totalSupply",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#transfer:member",
              "docComment": "/**\n * Moves `amount` tokens from the caller's account to `to`.\n *\n * Requirements:\n *\n * - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\n *\n * @param to - address that will receive the tokens\n *\n * @param amount - token amount to transfer\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly transfer: "
                },
                {
                  "kind": "Content",
                  "text": "(to: string, amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transfer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20#transferFrom:member",
              "docComment": "/**\n * Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance.\n *\n * NOTE: Does not update the allowance if the current allowance is the maximum `uint256`.\n *\n * Requirements:\n *\n * - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for `from`'s tokens of at least `amount`.\n *\n * @param from - address that have the tokens to transfer\n *\n * @param to - address that will receive the tokens\n *\n * @param amount - token amount to transfer\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly transferFrom: "
                },
                {
                  "kind": "Content",
                  "text": "(from: string, to: string, amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "transferFrom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow:class",
          "docComment": "/**\n * A class for calling methods on a RedeemableERC20ClaimEscrow.\n *\n * Escrow contract for ERC20 tokens to be deposited and withdrawn against redeemableERC20 tokens from a specific `Sale`.\n *\n * When some token is deposited the running total of that token against the trust is incremented by the deposited amount. When some `redeemableERC20` token holder calls `withdraw` they are sent the full balance they have not previously claimed, multiplied by their fraction of the redeemable token supply that they currently hold. As redeemable tokens are frozen after distribution there are no issues with holders manipulating withdrawals by transferring tokens to claim multiple times.\n *\n * @remarks\n *\n * This class provides an easy way to interact with the Escrow Rain\n *\n * @example\n * ```typescript\n * import { RedeemableERC20ClaimEscrow } from 'rain-sdk'\n *\n * // If the escrow address is unkwon or want to simplify the process, use get() to create the instance.\n * // This use the provider inside the signer to get the chainId and search the correct address.\n * const escrow = RedeemableERC20ClaimEscrow(saleAddress, tokenAddress, ethersSigner);\n *\n * const tx = escrow.deposit(amount);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RedeemableERC20ClaimEscrow extends "
            },
            {
              "kind": "Reference",
              "text": "RainContract",
              "canonicalReference": "rain-sdk!RainContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RedeemableERC20ClaimEscrow",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow:constructor(1)",
              "docComment": "/**\n * Constructs a new RedeemableERC20ClaimEscrow from a known address.\n *\n * @param address - The address of the NoticeBoard contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new NoticeBoard instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", saleAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", tokenAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "saleAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "tokenAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#changeSale:member",
              "docComment": "/**\n * Get a new instance with a different Sale to interact with the Escrow contract\n *\n * @param newSale - A new ISale address\n *\n * @returns A new RedeemableERC20ClaimEscrow instance with different Sale\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly changeSale: "
                },
                {
                  "kind": "Content",
                  "text": "(newSale: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "RedeemableERC20ClaimEscrow",
                  "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changeSale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#changeToken:member",
              "docComment": "/**\n * Get a new instance with a different ERC20 to interact with the Escrow contract\n *\n * @param newToken - A new IERC20 address\n *\n * @returns A new RedeemableERC20ClaimEscrow instance with different ERC20 Token\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly changeToken: "
                },
                {
                  "kind": "Content",
                  "text": "(newToken: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "RedeemableERC20ClaimEscrow",
                  "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changeToken",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#deposit:member",
              "docComment": "/**\n * Any address can deposit any amount of the token`IERC20` under the `Sale`. The `Sale` MUST be a child of the trusted factory.\n *\n * The deposit will be accounted for under both the depositor individually and the trust in aggregate. The aggregate value is used by `withdraw` and the individual value by `undeposit`.\n *\n * The depositor is responsible for approving the token for this contract. `deposit` is still enabled after the distribution ends; `undeposit` is always allowed in case of a fail and disabled on success. Multiple `deposit` calls before and after a success result are supported. If a depositor deposits when a raise has failed they will need to undeposit it again manually.\n *\n * Delegated `deposit` is not supported. Every depositor is directly responsible for every `deposit`.\n *\n * WARNING: As `undeposit` can only be called when the `Sale` reports failure, `deposit` should only be called when the caller is sure the `Sale` will reach a clear success/fail status. For example, when a `Sale` has not yet been seeded it may never even start the raise so depositing at this point is dangerous. If the `Sale` never starts the raise it will never fail the raise either.\n *\n * @param amount - The amount of token to deposit. Requires depositor has approved at least this amount to succeed.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly deposit: "
                },
                {
                  "kind": "Content",
                  "text": "(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deposit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#depositPending:member",
              "docComment": "/**\n * Depositor can set aside tokens during pending raise status to be swept into a real deposit later.\n *\n * The problem with doing a normal deposit while the raise is still active is that the `Sale` will burn all unsold tokens when the raise ends. If we captured the token supply mid-raise then many deposited TKN would be allocated to unsold rTKN. Instead we set aside TKN so that raise participants can be sure that they will be claimable upon raise success but they remain unbound to any rTKN supply until `sweepPending` is called.\n *\n * `depositPending` is a one-way function, there is no way to `undeposit` until after the raise fails. Strongly recommended that depositors do NOT call `depositPending` until raise starts, so they know it will also end.\n *\n * @param amount - The amount of token to despoit. Requires depositor has approved at least this amount to succeed.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly depositPending: "
                },
                {
                  "kind": "Content",
                  "text": "(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "depositPending",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow.get:member",
              "docComment": "/**\n * Create the RedeemableERC20ClaimEscrow instance.\n *\n * The function ask to the provider inside of the ethers signer what is the chain identifier to get the address in this chain.\n *\n * @param saleAddress - sale address\n *\n * @param tokenAddress - token ERC20 address\n *\n * @param signer - ethers signer connected to the instance\n *\n * @returns A RedeemableERC20ClaimEscrow instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static get: "
                },
                {
                  "kind": "Content",
                  "text": "(saleAddress: string, tokenAddress: string, signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RedeemableERC20ClaimEscrow",
                  "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "get",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"redeemableERC20ClaimEscrow\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#sale:member",
              "docComment": "/**\n * The `ISale` contract address that is used to interact with the Escrow contract.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly sale: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#sweepPending:member",
              "docComment": "/**\n * Anon can convert any existing pending deposit to a deposit with known rTKN supply once the escrow has moved out of pending status.\n *\n * As `sweepPending` is anon callable, raise participants know that the depositor cannot later prevent a sweep, and depositor knows that raise participants cannot prevent a sweep. As per normal deposits, the output of swept tokens depends on success/fail state allowing `undeposit` or `withdraw` to be called subsequently.\n *\n * Partial sweeps are NOT supported, to avoid griefers splitting a deposit across many different `supply_` values.\n *\n * @param depositor - The depositor to sweep registered deposits under.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly sweepPending: "
                },
                {
                  "kind": "Content",
                  "text": "(depositor: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sweepPending",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#token:member",
              "docComment": "/**\n * The `IERC20` token being deposited and that will be use to interact with the Escrow contract\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly token: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "token",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#undeposit:member",
              "docComment": "/**\n * The inverse of `deposit`.\n *\n * In the case of a failed distribution the depositors can claim back any tokens they deposited in the escrow.\n *\n * Ideally the distribution is a success and this does not need to be called but it is important that we can walk back deposits and try again for some future raise if needed.\n *\n * Delegated `undeposit` is not supported, only the depositor can wind back their original deposit.\n *\n * `amount` must be non-zero.\n *\n * If several tokens have been deposited against a given trust for the depositor then each token must be individually undeposited. There is no onchain tracking or bulk processing for the depositor, they are expected to know what they have previously deposited and if/when to process an `undeposit`.\n *\n * @param supply - The total supply of the sale token associated with the deposit being undeposited.\n *\n * @param amount - The amount to undeposit.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly undeposit: "
                },
                {
                  "kind": "Content",
                  "text": "(supply: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "undeposit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!RedeemableERC20ClaimEscrow#withdraw:member",
              "docComment": "/**\n * The successful handover of a `deposit` to a recipient.\n *\n * When a redeemable token distribution is successful the redeemable token holders are automatically and immediately eligible to `withdraw` any and all tokens previously deposited against the relevant `Sale`. The `withdraw` can only happen if/when the relevant `Sale` reaches the success distribution status.\n *\n * Delegated `withdraw` is NOT supported. Every redeemable token holder is directly responsible for being aware of and calling `withdraw`. If a redeemable token holder calls `redeem` they also burn their claim on any tokens held in escrow so they MUST first call `withdraw` THEN `redeem`.\n *\n * It is expected that the redeemable token holder knows about the tokens that they will be withdrawing. This information is NOT tracked onchain or exposed for bulk processing.\n *\n * Partial `withdraw` is not supported, all tokens allocated to the caller are withdrawn. 0 amount withdrawal is an error, if the prorata share of the token being claimed is small enough to round down to 0 then the withdraw will revert.\n *\n * Multiple withdrawals across multiple deposits is supported and is equivalent to a single withdraw after all relevant deposits.\n *\n * @param supply - The total supply of the sale token at time of deposit to process this withdrawal against.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly withdraw: "
                },
                {
                  "kind": "Content",
                  "text": "(supply: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "withdraw",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!RedeemableERC20DeployArgs:interface",
          "docComment": "/**\n * Everything required by the `RedeemableERC20` constructor.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RedeemableERC20DeployArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "RedeemableERC20DeployArgs",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!RedeemableERC20DeployArgs#distributionEndForwardingAddress:member",
              "docComment": "/**\n * Optional address to send rTKN to at the end of the distribution phase. If `0` address then all undistributed rTKN will burn itself at the end of the distribution.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distributionEndForwardingAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "distributionEndForwardingAddress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!RedeemableERC20DeployArgs#erc20Config:member",
              "docComment": "/**\n * ERC20 config forwarded to the ERC20 constructor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "erc20Config: "
                },
                {
                  "kind": "Reference",
                  "text": "ERC20Config",
                  "canonicalReference": "rain-sdk!ERC20Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "erc20Config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!RedeemableERC20DeployArgs#minimumTier:member",
              "docComment": "/**\n * Minimum tier required for transfers in `Phase.ZERO`. Can be `0`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minimumTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!RedeemableERC20DeployArgs#reserve:member",
              "docComment": "/**\n * Reserve token that the associated `Trust` or equivalent raise contract will be forwarding to the `RedeemableERC20` contract.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reserve: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reserve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!RedeemableERC20DeployArgs#tier:member",
              "docComment": "/**\n * Tier contract to compare statuses against on transfer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tier: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!RoyaltyInfo:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RoyaltyInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "RoyaltyInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!RoyaltyInfo#receiver:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "receiver: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "receiver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!RoyaltyInfo#royaltyAmount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "royaltyAmount: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "royaltyAmount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!Sale:class",
          "docComment": "/**\n * A class for deploying and calling methods on a Sale.\n *\n * @remarks\n *\n * This class provides an easy way to deploy Sales using Rain's canonical factories, and methods for interacting with an already deployed Sale.\n *\n * @example\n * ```typescript\n * import { Sale } from 'rain-sdk'\n * // To deploy a new Sale, pass an ethers.js Signer and the config for the Sale.\n * const newSale = await Sale.deploy(signer, SaleArgs)\n *\n * // To connect to an existing Sale just pass the address and an ethers.js Signer.\n * const existingSale = new Sale(address, signer)\n *\n * // Once you have a Sale, you can call the smart contract methods:\n * await existingSale.start()\n * await existingSale.buy(config_)\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Sale extends "
            },
            {
              "kind": "Reference",
              "text": "FactoryContract",
              "canonicalReference": "rain-sdk!FactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Sale",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!Sale:constructor(1)",
              "docComment": "/**\n * Constructs a new Sale from a known address.\n *\n * @param address - The address of the Sale contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new Sale instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale.afterBlockNumberConfig:member",
              "docComment": "/**\n * Create a condition as VM state configuration to that is true after a `blockNumber` in the chain.\n *\n * @param blockNumber - block number that will be use as comparision\n *\n * @returns A VM Configturation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static afterBlockNumberConfig: "
                },
                {
                  "kind": "Content",
                  "text": "(blockNumber: number) => "
                },
                {
                  "kind": "Reference",
                  "text": "State",
                  "canonicalReference": "rain-sdk!State:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "afterBlockNumberConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#buy:member",
              "docComment": "/**\n * Main entrypoint to the sale. Sells rTKN in exchange for reserve token. The price curve is eval'd to produce a reserve price quote. Each 1 unit of rTKN costs `price` reserve token where BOTH the rTKN units and price are treated as 18 decimal fixed point values. If the reserve token has more or less precision by its own conventions (e.g. \"decimals\" method on ERC20 tokens) then the price will need to scale accordingly. The receipt is _logged_ rather than returned as it cannot be used in same block for a refund anyway due to cooldowns.\n *\n * @param config - All parameters to configure the purchase.\n *\n * @param overrides - \n *\n * @see\n *\n * BuyConfig\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly buy: "
                },
                {
                  "kind": "Content",
                  "text": "(config: "
                },
                {
                  "kind": "Reference",
                  "text": "BuyConfig",
                  "canonicalReference": "rain-sdk!BuyConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "buy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#calculatePrice:member",
              "docComment": "/**\n * Calculates the current reserve price quoted for 1 unit of rTKN. Used internally to process `buy`\n *\n * @param units - Amount of rTKN to quote a price for, will be available to the price script from OPCODE_CURRENT_BUY_UNITS.\n *\n * @param overrides - \n *\n * @returns The current price\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly calculatePrice: "
                },
                {
                  "kind": "Content",
                  "text": "(units: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "calculatePrice",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#canEnd:member",
              "docComment": "/**\n * Can the sale end? Evals `canEndStatePointer` to a boolean that determines whether the sale can end (move from active to success/fail). Buying will fail if the sale has ended. If the sale is out of rTKN stock it can ALWAYS end and in this case will NOT eval the \"can end\" script. The sale can ONLY end if it is currently in active status.\n *\n * @param overrides - \n *\n * @returns true if can end the sale\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly canEnd: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "canEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#canStart:member",
              "docComment": "/**\n * Can the sale start? Evals `canStartStatePointer` to a boolean that determines whether the sale can start (move from pending to active). Buying from and ending the sale will both always fail if the sale never started. The sale can ONLY start if it is currently in pending status.\n *\n * @param overrides - \n *\n * @returns true if can start the sale\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly canStart: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "canStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#claimFees:member",
              "docComment": "/**\n * After a sale ends in success all fees collected for a recipient can be cleared. If the raise is active or fails then fees cannot be claimed as they are set aside in case of refund. A failed raise implies that all buyers should immediately refund and zero fees claimed.\n *\n * @param recipient - The recipient to claim fees for. Does NOT need to be the `msg.sender`.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly claimFees: "
                },
                {
                  "kind": "Content",
                  "text": "(recipient: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "claimFees",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale.deploy:member",
              "docComment": "/**\n * Deploys a new Sale.\n *\n * @param signer - An ethers.js Signer\n *\n * @param saleConfig - Arguments for the Sale configuration\n *\n * @param saleRedeemableERC20Config - Arguments for the Redeemable configuration\n *\n * @param overrides - \n *\n * @returns A new Sale instance\n *\n * @see\n *\n * saleConfig\n *\n * @see\n *\n * saleRedeemableERC20Config\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", saleConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "SaleConfig",
                  "canonicalReference": "rain-sdk!SaleConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ", saleRedeemableERC20Config: "
                },
                {
                  "kind": "Reference",
                  "text": "SaleRedeemableERC20Config",
                  "canonicalReference": "rain-sdk!SaleRedeemableERC20Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Sale",
                  "canonicalReference": "rain-sdk!Sale:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#end:member",
              "docComment": "/**\n * End the sale (move from active to success or fail). - `canEnd` MUST return true.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly end: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#getRedeemable:member",
              "docComment": "/**\n * Obtain the instance redeemable token from this sale.\n *\n * @param signer - The signer that will be connected to the Redeemable token instance. If not provided, the same signer of this instance will be used.\n *\n * @returns A Redeemable instance with all the redeemableERC20 methods\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly getRedeemable: "
                },
                {
                  "kind": "Content",
                  "text": "(signer?: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RedeemableERC20",
                  "canonicalReference": "rain-sdk!RedeemableERC20:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getRedeemable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this SaleFactory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"saleFactory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale.Opcode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Opcode: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        REMAINING_UNITS: number;\n        TOTAL_RESERVE_IN: number;\n        CURRENT_BUY_UNITS: number;\n        TOKEN_ADDRESS: number;\n        RESERVE_ADDRESS: number;\n        SKIP: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SKIP",
                  "canonicalReference": "rain-sdk!StandardOps.SKIP:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        VAL: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.VAL",
                  "canonicalReference": "rain-sdk!StandardOps.VAL:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        DUP: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.DUP",
                  "canonicalReference": "rain-sdk!StandardOps.DUP:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        ZIPMAP: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.ZIPMAP",
                  "canonicalReference": "rain-sdk!StandardOps.ZIPMAP:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        DEBUG: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.DEBUG",
                  "canonicalReference": "rain-sdk!StandardOps.DEBUG:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        BLOCK_NUMBER: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.BLOCK_NUMBER",
                  "canonicalReference": "rain-sdk!StandardOps.BLOCK_NUMBER:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        BLOCK_TIMESTAMP: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.BLOCK_TIMESTAMP",
                  "canonicalReference": "rain-sdk!StandardOps.BLOCK_TIMESTAMP:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SENDER: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SENDER",
                  "canonicalReference": "rain-sdk!StandardOps.SENDER:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        THIS_ADDRESS: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.THIS_ADDRESS",
                  "canonicalReference": "rain-sdk!StandardOps.THIS_ADDRESS:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SCALE18_MUL: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SCALE18_MUL",
                  "canonicalReference": "rain-sdk!StandardOps.SCALE18_MUL:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SCALE18_DIV: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SCALE18_DIV",
                  "canonicalReference": "rain-sdk!StandardOps.SCALE18_DIV:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SCALE18: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SCALE18",
                  "canonicalReference": "rain-sdk!StandardOps.SCALE18:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SCALEN: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SCALEN",
                  "canonicalReference": "rain-sdk!StandardOps.SCALEN:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SCALE_BY: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SCALE_BY",
                  "canonicalReference": "rain-sdk!StandardOps.SCALE_BY:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SCALE18_ONE: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SCALE18_ONE",
                  "canonicalReference": "rain-sdk!StandardOps.SCALE18_ONE:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SCALE18_DECIMALS: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SCALE18_DECIMALS",
                  "canonicalReference": "rain-sdk!StandardOps.SCALE18_DECIMALS:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        ADD: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.ADD",
                  "canonicalReference": "rain-sdk!StandardOps.ADD:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SATURATING_ADD: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SATURATING_ADD",
                  "canonicalReference": "rain-sdk!StandardOps.SATURATING_ADD:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SUB: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SUB",
                  "canonicalReference": "rain-sdk!StandardOps.SUB:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SATURATING_SUB: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SATURATING_SUB",
                  "canonicalReference": "rain-sdk!StandardOps.SATURATING_SUB:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        MUL: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.MUL",
                  "canonicalReference": "rain-sdk!StandardOps.MUL:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SATURATING_MUL: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SATURATING_MUL",
                  "canonicalReference": "rain-sdk!StandardOps.SATURATING_MUL:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        DIV: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.DIV",
                  "canonicalReference": "rain-sdk!StandardOps.DIV:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        MOD: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.MOD",
                  "canonicalReference": "rain-sdk!StandardOps.MOD:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        EXP: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.EXP",
                  "canonicalReference": "rain-sdk!StandardOps.EXP:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        MIN: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.MIN",
                  "canonicalReference": "rain-sdk!StandardOps.MIN:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        MAX: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.MAX",
                  "canonicalReference": "rain-sdk!StandardOps.MAX:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        ISZERO: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.ISZERO",
                  "canonicalReference": "rain-sdk!StandardOps.ISZERO:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        EAGER_IF: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.EAGER_IF",
                  "canonicalReference": "rain-sdk!StandardOps.EAGER_IF:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        EQUAL_TO: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.EQUAL_TO",
                  "canonicalReference": "rain-sdk!StandardOps.EQUAL_TO:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        LESS_THAN: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.LESS_THAN",
                  "canonicalReference": "rain-sdk!StandardOps.LESS_THAN:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        GREATER_THAN: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.GREATER_THAN",
                  "canonicalReference": "rain-sdk!StandardOps.GREATER_THAN:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        EVERY: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.EVERY",
                  "canonicalReference": "rain-sdk!StandardOps.EVERY:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        ANY: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.ANY",
                  "canonicalReference": "rain-sdk!StandardOps.ANY:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        REPORT: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.REPORT",
                  "canonicalReference": "rain-sdk!StandardOps.REPORT:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        NEVER: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.NEVER",
                  "canonicalReference": "rain-sdk!StandardOps.NEVER:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        ALWAYS: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.ALWAYS",
                  "canonicalReference": "rain-sdk!StandardOps.ALWAYS:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SATURATING_DIFF: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SATURATING_DIFF",
                  "canonicalReference": "rain-sdk!StandardOps.SATURATING_DIFF:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        UPDATE_BLOCKS_FOR_TIER_RANGE: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.UPDATE_BLOCKS_FOR_TIER_RANGE",
                  "canonicalReference": "rain-sdk!StandardOps.UPDATE_BLOCKS_FOR_TIER_RANGE:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        SELECT_LTE: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.SELECT_LTE",
                  "canonicalReference": "rain-sdk!StandardOps.SELECT_LTE:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        IERC20_BALANCE_OF: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.IERC20_BALANCE_OF",
                  "canonicalReference": "rain-sdk!StandardOps.IERC20_BALANCE_OF:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        IERC20_TOTAL_SUPPLY: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.IERC20_TOTAL_SUPPLY",
                  "canonicalReference": "rain-sdk!StandardOps.IERC20_TOTAL_SUPPLY:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        IERC721_BALANCE_OF: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.IERC721_BALANCE_OF",
                  "canonicalReference": "rain-sdk!StandardOps.IERC721_BALANCE_OF:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        IERC721_OWNER_OF: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.IERC721_OWNER_OF",
                  "canonicalReference": "rain-sdk!StandardOps.IERC721_OWNER_OF:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        IERC1155_BALANCE_OF: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.IERC1155_BALANCE_OF",
                  "canonicalReference": "rain-sdk!StandardOps.IERC1155_BALANCE_OF:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        IERC1155_BALANCE_OF_BATCH: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.IERC1155_BALANCE_OF_BATCH",
                  "canonicalReference": "rain-sdk!StandardOps.IERC1155_BALANCE_OF_BATCH:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        length: "
                },
                {
                  "kind": "Reference",
                  "text": "StandardOps.length",
                  "canonicalReference": "rain-sdk!StandardOps.length:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Opcode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 96
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#refund:member",
              "docComment": "/**\n * Rollback a buy given its receipt. Ignoring gas (which cannot be refunded) the refund process rolls back all state changes caused by a buy, other than the receipt id increment. Refunds are limited by the global cooldown to mitigate rapid buy/refund cycling that could cause volatile price curves or other unwanted side effects for other sale participants. Cooldowns are bypassed if the sale ends and is a failure.\n *\n * @param receipt - The receipt of the buy to rollback.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly refund: "
                },
                {
                  "kind": "Content",
                  "text": "(receipt: "
                },
                {
                  "kind": "Reference",
                  "text": "Receipt",
                  "canonicalReference": "rain-sdk!Receipt:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "refund",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#reserve:member",
              "docComment": "/**\n * Returns the address of the token that sale prices are denominated in. MUST NOT change during the lifecycle of the sale contract.\n *\n * @param overrides - \n *\n * @returns the token reserve address\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly reserve: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reserve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#saleStatus:member",
              "docComment": "/**\n * Returns the current `SaleStatus` of the sale. Represents a linear progression of the sale through its major lifecycle events.\n *\n * @param overrides - \n *\n * @returns The sale status\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly saleStatus: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "saleStatus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#start:member",
              "docComment": "/**\n * Start the sale (move from pending to active). - `canStart` MUST return true.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly start: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#timeout:member",
              "docComment": "/**\n * Timeout the sale (move from pending or active to fail). The ONLY condition for a timeout is that the `saleTimeout` block set during initialize is in the past. This means that regardless of what happens re: starting, ending, buying, etc. if the sale does NOT manage to unambiguously end by the timeout block then it can timeout to a fail state. This means that any downstream escrows or similar can always expect that eventually they will see a pass/fail state and so are safe to lock funds while a Sale is active.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly timeout: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Sale#token:member",
              "docComment": "/**\n * Returns the address of the token being sold in the sale. MUST NOT change during the lifecycle of the sale contract.\n *\n * @param overrides - \n *\n * @returns the token redeemable address\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly token: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "token",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!SaleConfig:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SaleConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "SaleConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#calculatePriceStateConfig:member",
              "docComment": "/**\n * State config for the script that defines the current price quoted by a Sale.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calculatePriceStateConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "State",
                  "canonicalReference": "rain-sdk!State:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "calculatePriceStateConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#canEndStateConfig:member",
              "docComment": "/**\n * State config for the script that allows a Sale to end. IMPORTANT: A Sale can always end if/when its rTKN sells out, regardless of the result of this script.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canEndStateConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "State",
                  "canonicalReference": "rain-sdk!State:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "canEndStateConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#canStartStateConfig:member",
              "docComment": "/**\n * State config for the script that allows a Sale to start.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canStartStateConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "State",
                  "canonicalReference": "rain-sdk!State:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "canStartStateConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#cooldownDuration:member",
              "docComment": "/**\n * The amount of blocks after each buy/refund, before a user is allowed another buy/refund.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cooldownDuration: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cooldownDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#dustSize:member",
              "docComment": "/**\n * The minimum amount of rTKN that must remain in the Sale contract unless it is all purchased, clearing the raise to 0 stock and thus ending the raise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dustSize: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dustSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#minimumRaise:member",
              "docComment": "/**\n * defines the amount of reserve required to raise tha defines success/fail of the sale. Reaching the minimum raise DOES NOT cause the raise to end early (unless the \"can end\" script allows it of course).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumRaise: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minimumRaise",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#recipient:member",
              "docComment": "/**\n * The recipient of the proceeds of a Sale, if/when the Sale is successful.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "recipient: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "recipient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#reserve:member",
              "docComment": "/**\n * The reserve token the Sale is deonominated in.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reserve: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reserve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleConfig#saleTimeout:member",
              "docComment": "/**\n * The number of blocks before this sale can timeout. SHOULD be well after the expected end time as a timeout will fail an active or pending sale regardless of any funds raised.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "saleTimeout: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "saleTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!SaleDeployArguments:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SaleDeployArguments "
            }
          ],
          "releaseTag": "Public",
          "name": "SaleDeployArguments",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleDeployArguments#saleConfig:member",
              "docComment": "/**\n * Everything required to configure (initialize) a Sale.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "saleConfig: "
                },
                {
                  "kind": "Reference",
                  "text": "SaleConfig",
                  "canonicalReference": "rain-sdk!SaleConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "saleConfig",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleDeployArguments#saleRedeemableERC20Config:member",
              "docComment": "/**\n * Config for the RedeemableERC20 token that is minted by the Sale\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "saleRedeemableERC20Config: "
                },
                {
                  "kind": "Reference",
                  "text": "SaleRedeemableERC20Config",
                  "canonicalReference": "rain-sdk!SaleRedeemableERC20Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "saleRedeemableERC20Config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!SaleRedeemableERC20Config:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SaleRedeemableERC20Config "
            }
          ],
          "releaseTag": "Public",
          "name": "SaleRedeemableERC20Config",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleRedeemableERC20Config#distributionEndForwardingAddress:member",
              "docComment": "/**\n * Optional address to send rTKN to at the end of the distribution phase. If `0` address then all undistributed rTKN will burn itself at the end of the distribution.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distributionEndForwardingAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "distributionEndForwardingAddress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleRedeemableERC20Config#erc20Config:member",
              "docComment": "/**\n * ERC20 config\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "erc20Config: "
                },
                {
                  "kind": "Reference",
                  "text": "ERC20Config",
                  "canonicalReference": "rain-sdk!ERC20Config:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "erc20Config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleRedeemableERC20Config#minimumTier:member",
              "docComment": "/**\n * Minimum tier required for transfers (i.e. to participate). Can be '0'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minimumTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "minimumTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!SaleRedeemableERC20Config#tier:member",
              "docComment": "/**\n * Tier contract to compare statuses against on transfer. This effectively gates participation in a Sale.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tier: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "rain-sdk!StandardOps:enum",
          "docComment": "/**\n * All the standard Op Codes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum StandardOps "
            }
          ],
          "releaseTag": "Public",
          "name": "StandardOps",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.ADD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ADD = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "releaseTag": "Public",
              "name": "ADD",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.ALWAYS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ALWAYS = "
                },
                {
                  "kind": "Content",
                  "text": "36"
                }
              ],
              "releaseTag": "Public",
              "name": "ALWAYS",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.ANY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ANY = "
                },
                {
                  "kind": "Content",
                  "text": "33"
                }
              ],
              "releaseTag": "Public",
              "name": "ANY",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.BLOCK_NUMBER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BLOCK_NUMBER = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "BLOCK_NUMBER",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.BLOCK_TIMESTAMP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BLOCK_TIMESTAMP = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "BLOCK_TIMESTAMP",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.DEBUG:member",
              "docComment": "/**\n * ABI encodes the entire stack and logs it to the hardhat console.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DEBUG = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "DEBUG",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.DIV:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DIV = "
                },
                {
                  "kind": "Content",
                  "text": "22"
                }
              ],
              "releaseTag": "Public",
              "name": "DIV",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.DUP:member",
              "docComment": "/**\n * Duplicates the value at index `operand_` to the top of the stack\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DUP = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "DUP",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.EAGER_IF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EAGER_IF = "
                },
                {
                  "kind": "Content",
                  "text": "28"
                }
              ],
              "releaseTag": "Public",
              "name": "EAGER_IF",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.EQUAL_TO:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EQUAL_TO = "
                },
                {
                  "kind": "Content",
                  "text": "29"
                }
              ],
              "releaseTag": "Public",
              "name": "EQUAL_TO",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.EVERY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EVERY = "
                },
                {
                  "kind": "Content",
                  "text": "32"
                }
              ],
              "releaseTag": "Public",
              "name": "EVERY",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.EXP:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EXP = "
                },
                {
                  "kind": "Content",
                  "text": "24"
                }
              ],
              "releaseTag": "Public",
              "name": "EXP",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.GREATER_THAN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GREATER_THAN = "
                },
                {
                  "kind": "Content",
                  "text": "31"
                }
              ],
              "releaseTag": "Public",
              "name": "GREATER_THAN",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.IERC1155_BALANCE_OF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC1155_BALANCE_OF = "
                },
                {
                  "kind": "Content",
                  "text": "44"
                }
              ],
              "releaseTag": "Public",
              "name": "IERC1155_BALANCE_OF",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.IERC1155_BALANCE_OF_BATCH:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC1155_BALANCE_OF_BATCH = "
                },
                {
                  "kind": "Content",
                  "text": "45"
                }
              ],
              "releaseTag": "Public",
              "name": "IERC1155_BALANCE_OF_BATCH",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.IERC20_BALANCE_OF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC20_BALANCE_OF = "
                },
                {
                  "kind": "Content",
                  "text": "40"
                }
              ],
              "releaseTag": "Public",
              "name": "IERC20_BALANCE_OF",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.IERC20_TOTAL_SUPPLY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC20_TOTAL_SUPPLY = "
                },
                {
                  "kind": "Content",
                  "text": "41"
                }
              ],
              "releaseTag": "Public",
              "name": "IERC20_TOTAL_SUPPLY",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.IERC721_BALANCE_OF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC721_BALANCE_OF = "
                },
                {
                  "kind": "Content",
                  "text": "42"
                }
              ],
              "releaseTag": "Public",
              "name": "IERC721_BALANCE_OF",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.IERC721_OWNER_OF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IERC721_OWNER_OF = "
                },
                {
                  "kind": "Content",
                  "text": "43"
                }
              ],
              "releaseTag": "Public",
              "name": "IERC721_OWNER_OF",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.ISZERO:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ISZERO = "
                },
                {
                  "kind": "Content",
                  "text": "27"
                }
              ],
              "releaseTag": "Public",
              "name": "ISZERO",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.length:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "length = "
                },
                {
                  "kind": "Content",
                  "text": "46"
                }
              ],
              "releaseTag": "Public",
              "name": "length",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.LESS_THAN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LESS_THAN = "
                },
                {
                  "kind": "Content",
                  "text": "30"
                }
              ],
              "releaseTag": "Public",
              "name": "LESS_THAN",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.MAX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MAX = "
                },
                {
                  "kind": "Content",
                  "text": "26"
                }
              ],
              "releaseTag": "Public",
              "name": "MAX",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.MIN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MIN = "
                },
                {
                  "kind": "Content",
                  "text": "25"
                }
              ],
              "releaseTag": "Public",
              "name": "MIN",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.MOD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MOD = "
                },
                {
                  "kind": "Content",
                  "text": "23"
                }
              ],
              "releaseTag": "Public",
              "name": "MOD",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.MUL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MUL = "
                },
                {
                  "kind": "Content",
                  "text": "20"
                }
              ],
              "releaseTag": "Public",
              "name": "MUL",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.NEVER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NEVER = "
                },
                {
                  "kind": "Content",
                  "text": "35"
                }
              ],
              "releaseTag": "Public",
              "name": "NEVER",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.REPORT:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "REPORT = "
                },
                {
                  "kind": "Content",
                  "text": "34"
                }
              ],
              "releaseTag": "Public",
              "name": "REPORT",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SATURATING_ADD:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SATURATING_ADD = "
                },
                {
                  "kind": "Content",
                  "text": "17"
                }
              ],
              "releaseTag": "Public",
              "name": "SATURATING_ADD",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SATURATING_DIFF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SATURATING_DIFF = "
                },
                {
                  "kind": "Content",
                  "text": "37"
                }
              ],
              "releaseTag": "Public",
              "name": "SATURATING_DIFF",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SATURATING_MUL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SATURATING_MUL = "
                },
                {
                  "kind": "Content",
                  "text": "21"
                }
              ],
              "releaseTag": "Public",
              "name": "SATURATING_MUL",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SATURATING_SUB:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SATURATING_SUB = "
                },
                {
                  "kind": "Content",
                  "text": "19"
                }
              ],
              "releaseTag": "Public",
              "name": "SATURATING_SUB",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SCALE_BY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE_BY = "
                },
                {
                  "kind": "Content",
                  "text": "13"
                }
              ],
              "releaseTag": "Public",
              "name": "SCALE_BY",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SCALE18:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE18 = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "releaseTag": "Public",
              "name": "SCALE18",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SCALE18_DECIMALS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE18_DECIMALS = "
                },
                {
                  "kind": "Content",
                  "text": "15"
                }
              ],
              "releaseTag": "Public",
              "name": "SCALE18_DECIMALS",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SCALE18_DIV:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE18_DIV = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "releaseTag": "Public",
              "name": "SCALE18_DIV",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SCALE18_MUL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE18_MUL = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "releaseTag": "Public",
              "name": "SCALE18_MUL",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SCALE18_ONE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALE18_ONE = "
                },
                {
                  "kind": "Content",
                  "text": "14"
                }
              ],
              "releaseTag": "Public",
              "name": "SCALE18_ONE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SCALEN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SCALEN = "
                },
                {
                  "kind": "Content",
                  "text": "12"
                }
              ],
              "releaseTag": "Public",
              "name": "SCALEN",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SELECT_LTE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SELECT_LTE = "
                },
                {
                  "kind": "Content",
                  "text": "39"
                }
              ],
              "releaseTag": "Public",
              "name": "SELECT_LTE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SENDER:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SENDER = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "SENDER",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SKIP:member",
              "docComment": "/**\n * @deprecated\n *\n * **DONT USE SKIP!**\n *\n * It is a skip as this is the fallback value for unset solidity bytes. Any additional \"whitespace\" in rain scripts will be noops as `0 0` is \"skip self\". The val can be used to skip additional opcodes but take care to not underflow the source itself.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SKIP = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "SKIP",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.SUB:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SUB = "
                },
                {
                  "kind": "Content",
                  "text": "18"
                }
              ],
              "releaseTag": "Public",
              "name": "SUB",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.THIS_ADDRESS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "THIS_ADDRESS = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "THIS_ADDRESS",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.UPDATE_BLOCKS_FOR_TIER_RANGE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UPDATE_BLOCKS_FOR_TIER_RANGE = "
                },
                {
                  "kind": "Content",
                  "text": "38"
                }
              ],
              "releaseTag": "Public",
              "name": "UPDATE_BLOCKS_FOR_TIER_RANGE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.VAL:member",
              "docComment": "/**\n * Copies a value either off `constants` or `arguments` to the top of the stack. The high bit of the operand specifies which, `0` for `constants` and `1` for `arguments`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "VAL = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "VAL",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!StandardOps.ZIPMAP:member",
              "docComment": "/**\n * Takes N values off the stack, interprets them as an array then zips and maps a source from `sources` over them. The source has access to the original constants using `1 0` and to zipped arguments as `1 1`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ZIPMAP = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "ZIPMAP",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!State:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface State "
            }
          ],
          "releaseTag": "Public",
          "name": "State",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!State#argumentsLength:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "argumentsLength: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "argumentsLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!State#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constants: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!State#sources:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sources: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!State#stackLength:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stackLength: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stackLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!TierFactoryContract:class",
          "docComment": "/**\n * Combine the static methods that are present in factories with the ITier instance methods. Should be use to the TierFactories.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class TierFactoryContract extends "
            },
            {
              "kind": "Reference",
              "text": "FactoryContract",
              "canonicalReference": "rain-sdk!FactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TierFactoryContract",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!TierFactoryContract:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TierFactoryContract` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!TierFactoryContract#report:member",
              "docComment": "/**\n * A tier report is a `uint256` that contains each of the block numbers each tier has been held continously since as a `uint32`. There are 9 possible tier, starting with tier 0 for `0` offset or \"never held any tier\" then working up through 8x 4 byte offsets to the full 256 bits.\n *\n * @param account - Account to get the report for.\n *\n * @param overrides - Specific transaction values to send it (e.g gasLimit, nonce or gasPrice)\n *\n * @returns The report blocks encoded as a uint256.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly report: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "report",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!TierFactoryContract#setTier:member",
              "docComment": "/**\n * Users can set their own tier by calling `setTier`. Updates the tier of an account. Transfers balances of erc20 from/to the tiered account according to the difference in values.\n *\n * Any failure to transfer in/out will rollback the tier change. The tiered account must ensure sufficient approvals before attempting to set a new tier. This throw an error if the user attempts to return to the ZERO tier.\n *\n * @param account - Account to change the tier for.\n *\n * @param endTier - Tier after the change.\n *\n * @param data - Arbitrary input to disambiguate ownership\n *\n * @param overrides - Specific transaction values to send it (e.g gasLimit, nonce or gasPrice)\n *\n * @returns The report blocks encoded as a uint256.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setTier: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, endTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "rain-sdk!Transferrable:enum",
          "docComment": "/**\n * Determine the status about how the GatedNFT contract will handle the transfers\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Transferrable "
            }
          ],
          "releaseTag": "Public",
          "name": "Transferrable",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!Transferrable.NonTransferrable:member",
              "docComment": "/**\n * Transfer not supported\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NonTransferrable = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "NonTransferrable",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!Transferrable.TierGatedTransferrable:member",
              "docComment": "/**\n * Address required a specific tier\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TierGatedTransferrable = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "TierGatedTransferrable",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "rain-sdk!Transferrable.Transferrable:member",
              "docComment": "/**\n * Transfer supported\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Transferrable = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Transferrable",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!TxOverrides:interface",
          "docComment": "/**\n * More read about `TxOverrides` that comes from Overrides of ethers\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TxOverrides extends "
            },
            {
              "kind": "Reference",
              "text": "Overrides",
              "canonicalReference": "@ethersproject/contracts!Overrides:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TxOverrides",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!TxOverrides#from:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "from?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "from",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!Verify:class",
          "docComment": "/**\n * A class for deploying and calling methods on a Verify.\n *\n * Trust-minimised contract to record the state of some verification process. When some off-chain identity is to be reified on chain there is inherently some multi-party, multi-faceted trust relationship. For example, the DID (Decentralized Identifiers) specification from W3C outlines that the controller and the subject of an identity are two different entities.\n *\n * @remarks\n *\n * This class provides an easy way to deploy Verifies using Rain's canonical factories, and methods for interacting with an already deployed Verify.\n *\n * @example\n * ```typescript\n * import { Verify } from 'rain-sdk'\n *\n * // To deploy a new Verify, pass an ethers.js Signer, the chainId and the config for the Verify.\n * const newVerify = await Verify.deploy(signer, chainId, VerifyConfigArgs)\n *\n * // To connect to an existing Verify just pass the address and an ethers.js Signer.\n * const existingVerify = new Verify(address, signer)\n *\n * // Once you have a Verify, you can call the smart contract methods:\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Verify extends "
            },
            {
              "kind": "Reference",
              "text": "FactoryContract",
              "canonicalReference": "rain-sdk!FactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Verify",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "rain-sdk!Verify:constructor(1)",
              "docComment": "/**\n * Constructs a new Verify from a known address.\n *\n * @param address - The address of the Verify contract\n *\n * @param signer - An ethers.js Signer\n *\n * @returns A new Verify instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(address: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "signer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#add:member",
              "docComment": "/**\n * An account adds their own verification evidence. Internally `msg.sender` is used; delegated `add` is not supported.\n *\n * @param data - The evidence to support approving the `msg.sender`.\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly add: "
                },
                {
                  "kind": "Content",
                  "text": "(data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "add",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#approve:member",
              "docComment": "/**\n * An `APPROVER` can review added evidence and approve accounts. Typically many approvals would be submitted in a single call which is more convenient and gas efficient than sending individual transactions for every approval. However, as there are many individual agents acting concurrently and independently this requires that the approval process be infallible so that no individual approval can rollback the entire batch due to the actions of some other approver/banner. It is possible to approve an already approved or banned account. The `Approve` event will always emit but the approved block will only be set if it was previously uninitialized. A banned account will always be seen as banned when calling `statusAtBlock` regardless of the approval block, even if the approval is more recent than the ban. The only way to reset a ban is to remove and reapprove the account.\n *\n * @param evidences - All evidence for all approvals.\n *\n * @param overrides - \n *\n * @see\n *\n * Evidence\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly approve: "
                },
                {
                  "kind": "Content",
                  "text": "(evidences: "
                },
                {
                  "kind": "Reference",
                  "text": "Evidence",
                  "canonicalReference": "rain-sdk!Evidence:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "approve",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#APPROVER_ADMIN:member",
              "docComment": "/**\n * Admin role for `APPROVER`\n *\n * @param overrides - \n *\n * @returns Approver admin role as an hexadecimal value\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly APPROVER_ADMIN: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "APPROVER_ADMIN",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#APPROVER:member",
              "docComment": "/**\n * Role for `APPROVER`\n *\n * @param overrides - \n *\n * @returns Approve role as an hexadecimal value\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly APPROVER: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "APPROVER",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#ban:member",
              "docComment": "/**\n * A `BANNER` can ban an added OR approved account.\n *\n * @param evidences - All evidence appropriate for all bans..\n *\n * @param overrides - \n *\n * @see\n *\n * Evidence\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ban: "
                },
                {
                  "kind": "Content",
                  "text": "(evidences: "
                },
                {
                  "kind": "Reference",
                  "text": "Evidence",
                  "canonicalReference": "rain-sdk!Evidence:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ban",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#BANNER_ADMIN:member",
              "docComment": "/**\n * Admin role for `BANNER`\n *\n * @param overrides - \n *\n * @returns Banner admin role as an hexadecimal value\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly BANNER_ADMIN: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "BANNER_ADMIN",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#BANNER:member",
              "docComment": "/**\n * Role for `BANNER`\n *\n * @param overrides - \n *\n * @returns Banner role as an hexadecimal value\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly BANNER: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "BANNER",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#callback:member",
              "docComment": "/**\n * @param overrides - \n *\n * @returns VerifyCallback contract address. MAY be address 0.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly callback: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#DEFAULT_ADMIN_ROLE:member",
              "docComment": "/**\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\n *\n * @param overrides - \n *\n * @returns Default admin role as an hexadecimal value\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly DEFAULT_ADMIN_ROLE: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "DEFAULT_ADMIN_ROLE",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify.deploy:member",
              "docComment": "/**\n * Deploys a new Verify.\n *\n * @param signer - An ethers.js Signer\n *\n * @param args - Arguments for deploying a Verify\n *\n * @param overrides - Specific transaction values to send it (e.g gasLimit, nonce or gasPrice)\n *\n * @returns A new Verify instance\n *\n * @see\n *\n * VerifyDeployArgs\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "VerifyDeployArgs",
                  "canonicalReference": "rain-sdk!VerifyDeployArgs:interface"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Verify",
                  "canonicalReference": "rain-sdk!Verify:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#getRoleAdmin:member",
              "docComment": "/**\n * Get the admin role that controls `role`\n *\n * @param role - Role for which the RoleAdmin is obtained\n *\n * @param overrides - \n *\n * @returns The admin role\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly getRoleAdmin: "
                },
                {
                  "kind": "Content",
                  "text": "(role: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "getRoleAdmin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#grantRole:member",
              "docComment": "/**\n * Grants `role` to `account`.\n *\n * If `account` had not been already granted `role`, emits a RoleGranted event.\n *\n * Require that caller have admin role of `role`.\n *\n * @param role - Role that will be granted\n *\n * @param account - Account that will get the role\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly grantRole: "
                },
                {
                  "kind": "Content",
                  "text": "(role: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", account: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "grantRole",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#hasRole:member",
              "docComment": "/**\n * Check if an `account` have a determined `role` in the Verify Contract.\n *\n * @param role - The role that will check if `account` have.\n *\n * @param account - The account that will checked.\n *\n * @param overrides - \n *\n * @returns A boolean with `true` if `account` has been granted `role`.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly hasRole: "
                },
                {
                  "kind": "Content",
                  "text": "(role: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", account: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hasRole",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this VerifyFactory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"verifyFactory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#remove:member",
              "docComment": "/**\n * A `REMOVER` can scrub state mapping from an account. A malicious account MUST be banned rather than removed. Removal is useful to reset the whole process in case of some mistake.\n *\n * @param evidences - All evidence to suppor the removal.\n *\n * @param overrides - \n *\n * @see\n *\n * Evidence\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly remove: "
                },
                {
                  "kind": "Content",
                  "text": "(evidences: "
                },
                {
                  "kind": "Reference",
                  "text": "Evidence",
                  "canonicalReference": "rain-sdk!Evidence:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#REMOVER_ADMIN:member",
              "docComment": "/**\n * Admin role for `REMOVER`\n *\n * @param overrides - \n *\n * @returns Remover admin role as an hexadecimal value\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly REMOVER_ADMIN: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "REMOVER_ADMIN",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#REMOVER:member",
              "docComment": "/**\n * Role for `REMOVER`\n *\n * @param overrides - \n *\n * @returns Remover role as an hexadecimal value\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly REMOVER: "
                },
                {
                  "kind": "Content",
                  "text": "(overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "REMOVER",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#renounceRole:member",
              "docComment": "/**\n * Revokes `role` from the calling account.\n *\n * Roles are often managed via grantRole and revokeRole: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).\n *\n * If the calling account had been granted `role`, emits a RoleRevoked event.\n *\n * Requires the caller to be the `account`.\n *\n * @param role - Role that will be revoked\n *\n * @param account - Account that will lost the role\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly renounceRole: "
                },
                {
                  "kind": "Content",
                  "text": "(role: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", account: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "renounceRole",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#requestApprove:member",
              "docComment": "/**\n * Any approved address can request some other address be approved. Frivolous requestors SHOULD expect to find themselves banned.\n *\n * @param evidences - Array of evidences to request approvals for.\n *\n * @param overrides - \n *\n * @see\n *\n * Evidence\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly requestApprove: "
                },
                {
                  "kind": "Content",
                  "text": "(evidences: "
                },
                {
                  "kind": "Reference",
                  "text": "Evidence",
                  "canonicalReference": "rain-sdk!Evidence:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestApprove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#requestBan:member",
              "docComment": "/**\n * Any approved address can request some other address be banned. Frivolous requestors SHOULD expect to find themselves banned.\n *\n * @param evidences - Array of evidences to request banning for.\n *\n * @param overrides - \n *\n * @see\n *\n * Evidence\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly requestBan: "
                },
                {
                  "kind": "Content",
                  "text": "(evidences: "
                },
                {
                  "kind": "Reference",
                  "text": "Evidence",
                  "canonicalReference": "rain-sdk!Evidence:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestBan",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#requestRemove:member",
              "docComment": "/**\n * Any approved address can request some other address be removed. Frivolous requestors SHOULD expect to find themselves banned.\n *\n * @param evidences - Array of evidences to request removal of.\n *\n * @param overrides - \n *\n * @see\n *\n * Evidence\n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly requestRemove: "
                },
                {
                  "kind": "Content",
                  "text": "(evidences: "
                },
                {
                  "kind": "Reference",
                  "text": "Evidence",
                  "canonicalReference": "rain-sdk!Evidence:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "requestRemove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#revokeRole:member",
              "docComment": "/**\n * Revokes `role` from `account`.\n *\n * If `account` had been granted `role`, emits a RoleRevoked event.\n *\n * Require that caller have admin role of `role`.\n *\n * @param role - Role that will be revoked\n *\n * @param account - Account that will lost the role\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly revokeRole: "
                },
                {
                  "kind": "Content",
                  "text": "(role: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", account: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ContractTransaction",
                  "canonicalReference": "@ethersproject/contracts!ContractTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "revokeRole",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#state:member",
              "docComment": "/**\n * Typed accessor into states.\n *\n * @param account - The account to return the current `State` for.\n *\n * @param overrides - \n *\n * @returns - the state from the account.\n *\n * @see\n *\n * ReadTxOverrides\n *\n * @see\n *\n * State\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly state: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "VerifyState",
                  "canonicalReference": "rain-sdk!VerifyState:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#statusAtBlock:member",
              "docComment": "/**\n * Derives a single `Status` from a `State` and a reference block number.\n *\n * @param state - The raw `State` to reduce into a `Status`.\n *\n * @param blockNumber - The block number to compare `State` against.\n *\n * @param overrides - \n *\n * @returns A `BigNumber` that represent the `status` in `blockNumber`.\n *\n * @see\n *\n * ReadTxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly statusAtBlock: "
                },
                {
                  "kind": "Content",
                  "text": "(state: "
                },
                {
                  "kind": "Reference",
                  "text": "VerifyState",
                  "canonicalReference": "rain-sdk!VerifyState:interface"
                },
                {
                  "kind": "Content",
                  "text": ", blockNumber: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BigNumber",
                  "canonicalReference": "@ethersproject/bignumber!BigNumber:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "statusAtBlock",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!Verify#supportsInterface:member",
              "docComment": "/**\n * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created.\n *\n * @param interfaceId - The interfaceId that will be checked if it is supported\n *\n * @param overrides - \n *\n * @see\n *\n * TxOverrides\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly supportsInterface: "
                },
                {
                  "kind": "Content",
                  "text": "(interfaceId: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadTxOverrides",
                  "canonicalReference": "rain-sdk!ReadTxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "supportsInterface",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!VerifyDeployArgs:interface",
          "docComment": "/**\n * Config to initialize a Verify contract with.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VerifyDeployArgs "
            }
          ],
          "releaseTag": "Public",
          "name": "VerifyDeployArgs",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!VerifyDeployArgs#admin:member",
              "docComment": "/**\n * The address to ASSIGN ALL ADMIN ROLES to initially. This address is free and encouraged to delegate fine grained permissions to many other sub-admin addresses, then revoke it's own \"root\" access.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "admin: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "admin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!VerifyDeployArgs#callback:member",
              "docComment": "/**\n * The address of the `IVerifyCallback` contract if it exists. MAY be `address(0)` to signify that callbacks should NOT run.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callback: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "callback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "rain-sdk!VerifyState:interface",
          "docComment": "/**\n * Records the block a verify session reaches each status. If a status is not reached it is left as UNINITIALIZED, i.e. 0xFFFFFFFF. Most accounts will never be banned so most accounts will never reach every status, which is a good thing.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VerifyState "
            }
          ],
          "releaseTag": "Public",
          "name": "VerifyState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!VerifyState#addedSince:member",
              "docComment": "/**\n * Block the address was added else 0xFFFFFFFF.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addedSince: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "addedSince",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!VerifyState#approvedSince:member",
              "docComment": "/**\n * Block the address was approved else 0xFFFFFFFF.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "approvedSince: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "approvedSince",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "rain-sdk!VerifyState#bannedSince:member",
              "docComment": "/**\n * Block the address was banned else 0xFFFFFFFF.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bannedSince: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bannedSince",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!VerifyTier:class",
          "docComment": "/**\n * A class for deploying and calling methods on a VerifyTier.\n *\n * A contract that is `VerifyTier` expects to derive tiers from the time the account was approved by the underlying `Verify` contract. The approval block numbers defer to `State.since` returned from `Verify.state`.\n *\n * @remarks\n *\n * This class provides an easy way to deploy VerifyTiers using Rain's canonical factories, and methods for interacting with an already deployed VerifyTier.\n *\n * @example\n * ```typescript\n * import { VerifyTier } from 'rain-sdk'\n * // To deploy a new VerifyTier, pass an ethers.js Signer and the config for the VerifyTier.\n * const newTier = await VerifyTier.deploy(signer, VerifyTierConfigArgs);\n *\n * // To connect to an existing VerifyTier just pass the address and an ethers.js Signer.\n * const existingTier = new VerifyTier(address, signer);\n *\n * // Once you have a VerifyTier, you can call the smart contract methods:\n * const report = await existingTier.report(address);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class VerifyTier extends "
            },
            {
              "kind": "Reference",
              "text": "TierFactoryContract",
              "canonicalReference": "rain-sdk!TierFactoryContract:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VerifyTier",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!VerifyTier.deploy:member",
              "docComment": "/**\n * Deploys a new VerifyTier.\n *\n * @param signer - An ethers.js Signer\n *\n * @param verifyAddress - The contract to check to produce reports.\n *\n * @param overrides - Specific transaction values to send it (e.g gasLimit, nonce or gasPrice)\n *\n * @returns A new VerifyTier instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deploy: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", verifyAddress: string, overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "VerifyTier",
                  "canonicalReference": "rain-sdk!VerifyTier:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deploy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!VerifyTier.isChild:member",
              "docComment": "/**\n * Checks if address is registered as a child contract of this VerifyTierFactory on a specific network\n *\n * @param signer - An ethers.js Signer\n *\n * @param maybeChild - Address to check registration for.\n *\n * @returns `true` if address was deployed by this contract factory, otherwise `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isChild: "
                },
                {
                  "kind": "Content",
                  "text": "(signer: "
                },
                {
                  "kind": "Reference",
                  "text": "Signer",
                  "canonicalReference": "@ethersproject/abstract-signer!Signer:class"
                },
                {
                  "kind": "Content",
                  "text": ", maybeChild: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isChild",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!VerifyTier.nameBookReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected static readonly nameBookReference = \"verifyTierFactory\";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nameBookReference",
              "propertyTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "rain-sdk!VerifyTier#setTier:member",
              "docComment": "/**\n * It is NOT implemented in VerifyTiers. Always will throw an error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setTier: "
                },
                {
                  "kind": "Content",
                  "text": "(account: string, endTier: "
                },
                {
                  "kind": "Reference",
                  "text": "BigNumberish",
                  "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Reference",
                  "text": "BytesLike",
                  "canonicalReference": "@ethersproject/bytes!BytesLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", overrides?: "
                },
                {
                  "kind": "Reference",
                  "text": "TxOverrides",
                  "canonicalReference": "rain-sdk!TxOverrides:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<never>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "setTier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "rain-sdk!VM:class",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class VM "
            }
          ],
          "releaseTag": "Public",
          "name": "VM",
          "members": [],
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
